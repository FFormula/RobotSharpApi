-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               5.7.20 - MySQL Community Server (GPL)
-- Server OS:                    Win64
-- HeidiSQL Version:             9.5.0.5196
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- Dumping structure for table ROBOT.dict
DROP TABLE IF EXISTS `dict`;
CREATE TABLE IF NOT EXISTS `dict` (
  `id` varchar(2) NOT NULL,
  `language` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table ROBOT.dict: ~3 rows (approximately)
/*!40000 ALTER TABLE `dict` DISABLE KEYS */;
INSERT INTO `dict` (`id`, `language`) VALUES
	('en', 'English'),
	('lt', 'Lietuviu'),
	('ru', 'Русский');
/*!40000 ALTER TABLE `dict` ENABLE KEYS */;

-- Dumping structure for table ROBOT.lang
DROP TABLE IF EXISTS `lang`;
CREATE TABLE IF NOT EXISTS `lang` (
  `id` varchar(8) NOT NULL,
  `lang` varchar(255) DEFAULT NULL,
  `source` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table ROBOT.lang: ~4 rows (approximately)
/*!40000 ALTER TABLE `lang` DISABLE KEYS */;
INSERT INTO `lang` (`id`, `lang`, `source`) VALUES
	('cpp', 'C++', '#include <iostream>\r\nusing namespace std;\r\n\r\nint main () \r\n{\r\n    cout << "Hello World!" << endl;\r\n}\r\n'),
	('cs', 'C#', 'using System;\r\n\r\nclass VideoSharp\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine ("Hello World!");\r\n        Console.WriteLine ();\r\n    }\r\n}\r\n'),
	('java', 'Java', 'public class Program\r\n{\r\n    public static void main (String [] args)\r\n    {\r\n        System.out.println("Hello World!");  \r\n    }\r\n}\r\n'),
	('pas', 'Pascal', 'program VideoSharp;\r\nbegin\r\n    writeln (\'Hello World!\')\r\nend.');
/*!40000 ALTER TABLE `lang` ENABLE KEYS */;

-- Dumping structure for table ROBOT.login
DROP TABLE IF EXISTS `login`;
CREATE TABLE IF NOT EXISTS `login` (
  `token` varchar(32) NOT NULL,
  `partnerId` int(11) DEFAULT NULL,
  `userId` int(11) DEFAULT NULL,
  `expired` int(11) DEFAULT NULL,
  PRIMARY KEY (`token`),
  KEY `FK_login_user` (`userId`),
  KEY `FK_login_partner` (`partnerId`),
  CONSTRAINT `FK_login_partner` FOREIGN KEY (`partnerId`) REFERENCES `partner` (`id`),
  CONSTRAINT `FK_login_user` FOREIGN KEY (`userId`) REFERENCES `user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table ROBOT.login: ~2 rows (approximately)
/*!40000 ALTER TABLE `login` DISABLE KEYS */;
INSERT INTO `login` (`token`, `partnerId`, `userId`, `expired`) VALUES
	('1AXdZg5uQIliwhBp9atYFx5MGNTvy9cS', 1, 6, 1549538188),
	('74YdPGeRn9LW3Ap5oNyThgfDqMk32V7t', 1, 1, 1549537069);
/*!40000 ALTER TABLE `login` ENABLE KEYS */;

-- Dumping structure for table ROBOT.partner
DROP TABLE IF EXISTS `partner`;
CREATE TABLE IF NOT EXISTS `partner` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `apikey` varchar(255) NOT NULL,
  `status` int(11) NOT NULL DEFAULT '0',
  `info` text,
  PRIMARY KEY (`id`),
  UNIQUE KEY `partner` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- Dumping data for table ROBOT.partner: ~2 rows (approximately)
/*!40000 ALTER TABLE `partner` DISABLE KEYS */;
INSERT INTO `partner` (`id`, `name`, `apikey`, `status`, `info`) VALUES
	(1, 'videosharp', 'videosharp', 1, 'https://www.videosharp.info/'),
	(2, 'tomsk', 'tomsk', 1, NULL);
/*!40000 ALTER TABLE `partner` ENABLE KEYS */;

-- Dumping structure for table ROBOT.program
DROP TABLE IF EXISTS `program`;
CREATE TABLE IF NOT EXISTS `program` (
  `userId` int(11) NOT NULL,
  `taskId` int(11) NOT NULL,
  `langId` varchar(8) NOT NULL,
  `runkey` varchar(32) DEFAULT NULL,
  `points` int(11) DEFAULT NULL,
  `runs` int(10) unsigned zerofill DEFAULT '0000000000',
  `source` text,
  `answer` text,
  PRIMARY KEY (`userId`,`taskId`,`langId`),
  KEY `FK_prog_task` (`taskId`),
  KEY `FK_prog_lang` (`langId`),
  CONSTRAINT `FK_prog_lang` FOREIGN KEY (`langId`) REFERENCES `lang` (`id`),
  CONSTRAINT `FK_prog_task` FOREIGN KEY (`taskId`) REFERENCES `task` (`id`),
  CONSTRAINT `FK_prog_user` FOREIGN KEY (`userId`) REFERENCES `user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table ROBOT.program: ~0 rows (approximately)
/*!40000 ALTER TABLE `program` DISABLE KEYS */;
/*!40000 ALTER TABLE `program` ENABLE KEYS */;

-- Dumping structure for table ROBOT.task
DROP TABLE IF EXISTS `task`;
CREATE TABLE IF NOT EXISTS `task` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `authorId` int(11) NOT NULL DEFAULT '0',
  `name` varchar(100) NOT NULL DEFAULT '0',
  `sectorId` int(11) DEFAULT '0',
  `sector` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `step` int(11) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `task` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=3674 DEFAULT CHARSET=latin1;

-- Dumping data for table ROBOT.task: ~72 rows (approximately)
/*!40000 ALTER TABLE `task` DISABLE KEYS */;
INSERT INTO `task` (`id`, `authorId`, `name`, `sectorId`, `sector`, `step`) VALUES
	(1194, 1, 'book1194', 177, '101. Математика', 175001194),
	(1634, 1, 'book1634', 170, '000. Строки', 170001634),
	(1635, 1, 'book1635', 170, '000. Строки', 170001635),
	(1636, 1, 'book1636', 170, '000. Строки', 170001636),
	(1637, 1, 'book1637', 170, '000. Строки', 170001638),
	(1638, 1, 'book1638', 170, '000. Строки', 170001639),
	(1639, 1, 'book1639', 170, '000. Строки', 170001637),
	(1640, 1, 'book1640', 170, '000. Строки', 170001640),
	(1641, 1, 'book1641', 170, '000. Строки', 170001641),
	(1642, 1, 'book1642', 171, '001. Числа', 171000090),
	(1643, 1, 'book1643', 171, '001. Числа', 171001438),
	(1645, 1, 'book1645', 171, '001. Числа', 171001642),
	(1647, 1, 'book1647', 171, '001. Числа', 171001643),
	(1652, 1, 'book1652', 172, '010. Условия', 172001522),
	(1653, 1, 'book1653', 171, '001. Числа', 171001644),
	(1654, 1, 'book1654', 171, '001. Числа', 171001645),
	(1655, 1, 'book1655', 171, '001. Числа', 171001256),
	(1656, 1, 'book1656', 171, '001. Числа', 171000124),
	(1657, 1, 'book1657', 172, '010. Условия', 172000029),
	(1658, 1, 'book1658', 172, '010. Условия', 172000047),
	(1659, 1, 'book1659', 172, '010. Условия', 172000048),
	(1660, 1, 'book1660', 172, '010. Условия', 172000087),
	(1661, 1, 'book1661', 194, 'Экзамен', 194001694),
	(1662, 1, 'book1662', 172, '010. Условия', 172000089),
	(1663, 1, 'book1663', 172, '010. Условия', 172000092),
	(1664, 1, 'book1664', 173, '011. Циклы', 173000081),
	(1665, 1, 'book1665', 173, '011. Циклы', 173000263),
	(1666, 1, 'book1666', 194, 'Экзамен', 194003665),
	(1667, 1, 'book1667', 173, '011. Циклы', 173000230),
	(1668, 1, 'book1668', 173, '011. Циклы', 173000057),
	(1669, 1, 'book1669', 173, '011. Циклы', 173000245),
	(1671, 1, 'book1671', 173, '011. Циклы', 173000194),
	(1672, 1, 'book1672', 175, '110. Функции', 176000221),
	(1673, 1, 'book1673', 175, '110. Функции', 176000266),
	(1674, 1, 'book1674', 175, '110. Функции', 176000267),
	(1675, 1, 'book1675', 175, '110. Функции', 176000268),
	(1676, 1, 'book1676', 174, '100. Массивы', 174000293),
	(1677, 1, 'book1677', 174, '100. Массивы', 174000295),
	(1678, 1, 'book1678', 174, '100. Массивы', 174000297),
	(1679, 1, 'book1679', 174, '100. Массивы', 174000300),
	(1680, 1, 'book1680', 174, '100. Массивы', 174000301),
	(1681, 1, 'book1681', 174, '100. Массивы', 174000292),
	(1682, 1, 'book1682', 174, '100. Массивы', 174001153),
	(1683, 1, 'book1683', 174, '100. Массивы', 174000294),
	(1684, 1, 'book1684', 175, '110. Функции', 176000153),
	(1685, 1, 'book1685', 175, '110. Функции', 176000215),
	(1686, 1, 'book1686', 175, '110. Функции', 176000209),
	(1687, 1, 'book1687', 175, '110. Функции', 176000212),
	(1688, 1, 'book1688', 177, '101. Математика', 175000236),
	(1689, 1, 'book1689', 177, '101. Математика', 175001189),
	(1690, 1, 'book1690', 177, '101. Математика', 175001193),
	(1691, 1, 'book1691', 177, '101. Математика', 175000118),
	(1692, 1, 'book1692', 177, '101. Математика', 175001647),
	(1693, 1, 'book1693', 177, '101. Математика', 175000243),
	(1694, 1, 'book1694', 194, 'Экзамен', 194003669),
	(1695, 1, 'book1695', 173, '011. Циклы', 173000063),
	(1696, 1, 'book1696', 173, '011. Циклы', 173000077),
	(1697, 1, 'book1697', 177, '101. Математика', 175000161),
	(1706, 1, 'book1706', 176, '111. Потоки', 177001706),
	(1707, 1, 'book1707', 176, '111. Потоки', 177001707),
	(1708, 1, 'book1708', 176, '111. Потоки', 177001708),
	(1709, 1, 'book1709', 176, '111. Потоки', 177001709),
	(1710, 1, 'book1710', 176, '111. Потоки', 177001710),
	(1711, 1, 'book1711', 176, '111. Потоки', 177001711),
	(1712, 1, 'book1712', 176, '111. Потоки', 177001712),
	(1713, 1, 'book1713', 176, '111. Потоки', 177001713),
	(1720, 1, 'book1720', 172, '010. Условия', 172001720),
	(3665, 1, 'book3665', 194, 'Экзамен', 194000332),
	(3666, 1, 'book3666', 194, 'Экзамен', 194001249),
	(3669, 1, 'book3669', 194, 'Экзамен', 194003668),
	(3672, 1, 'book3672', 194, 'Экзамен', 194003673),
	(3673, 1, 'book3673', 194, 'Экзамен', 194003672);
/*!40000 ALTER TABLE `task` ENABLE KEYS */;

-- Dumping structure for table ROBOT.taskDict
DROP TABLE IF EXISTS `taskDict`;
CREATE TABLE IF NOT EXISTS `taskDict` (
  `taskId` int(11) NOT NULL,
  `dictId` varchar(2) NOT NULL,
  `caption` varchar(255) DEFAULT NULL,
  `description` text,
  `video` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`taskId`,`dictId`),
  KEY `FK_taskDict_dict` (`dictId`),
  CONSTRAINT `FK_taskDict_dict` FOREIGN KEY (`dictId`) REFERENCES `dict` (`id`),
  CONSTRAINT `FK_taskDict_task` FOREIGN KEY (`taskId`) REFERENCES `task` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table ROBOT.taskDict: ~72 rows (approximately)
/*!40000 ALTER TABLE `taskDict` DISABLE KEYS */;
INSERT INTO `taskDict` (`taskId`, `dictId`, `caption`, `description`, `video`) VALUES
	(1194, 'ru', 'Минимум и максимум', 'Дан массив из N (от 1 до 100) целых чисел. \r\nНайти минимальное и максимальное значения в массиве, вывести их.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел - элементы массива.\r\n<strong>Вывод результата</strong>: строка, содержащая два числа - минимум и максимум массива, выведенные через пробел.', ''),
	(1634, 'ru', 'Эхо', '<div class="col-xs-12 col-sm-6"><strong><span style="color:#68217A">Дано</span></strong>: фраза на первой строке\r\n<strong><span style="color:#68217A">Надо</span></strong>: Повторить фразу 2 раза на двух строчках</div>\r\n<div class="col-xs-12 col-sm-6">\r\n<img src="/data/img/console/1634.png" class="width-100"></div>', 'i0EDfEFziEU'),
	(1635, 'ru', 'Длина', 'Дано: Две фразы на двух строчках\r\nНадо: Вывести длины этих фраз через пробел.\r\n<img src="/data/img/console/1635.png" class="width-100">', ''),
	(1636, 'ru', 'Слова', 'Дано: строка из пяти слов, разделённых пробелами.\r\nНадо: вывести каждое слово на отдельной строке.<img src="/data/img/console/1636.png" class="width-100">', ''),
	(1637, 'ru', 'Подстрока', 'Вводится фраза, в которой есть текст в скобках.\r\nВывести на экран этот текст.\r\n\r\n<strong>Начальные данные</strong>: одна строка.\r\n<strong>Вывод результата</strong>: текст, который был внутри скобок строки.<img src="/data/img/console/1637.png" class="width-100">', ''),
	(1638, 'ru', 'Длинное слово', 'Вводится строка. Вывести длину самого длинного слова в строке. Слова разделяются одним или несколькими пробелами. \r\nСтрока может содержать знаки препинания, которые не входят в длину слова  <strong> . , : ; ? ! - </strong>\r\n\r\n<strong>Начальные данные</strong>: строка текста.\r\n<strong>Вывод результата</strong>: 1 число - количество символов самого длинного слова.<img src="/data/img/console/1638.png" class="width-100">', ''),
	(1639, 'ru', 'Сравнение', 'Дано: две строки текста.\r\nНадо: вывести результаты сравнения этих строк \r\n      с учётом регистра и без учёта регистра букв.<img src="/data/img/console/1639.png" class="width-100">', ''),
	(1640, 'ru', 'Новое слово', 'Вводится предложение, в котором слова разделяются пробелами.\r\nДалее вводится слово. Вставить его после первого слова в предложении.\r\n\r\n<strong>Начальные данные</strong>: две строки - предложение и слово.\r\n<strong>Вывод результата</strong>: одна строка - дополненное предложение.<img src="/data/img/console/1640.png" class="width-100">', ''),
	(1641, 'ru', 'Пробелы', 'Вводится строка вида\r\n[    NNNN    ]\r\nМежду скобками может быть любое количество пробелов или знаков табуляций.\r\nУдалить из строки символы квадратных скобок и продемонстрировать работу методов TrimStart, TrimEnd и Trim.\r\nРезультат вывести на трёх строчках, заключив его в квадратные скобки.\r\n\r\n<strong>Начальные данные</strong>: строка символов как в условии.\r\n<strong>Вывод результата</strong>: три строки - результаты соответствующих методов.<img src="/data/img/console/1641.png" class="width-100">', ''),
	(1642, 'ru', 'Чтение', 'Суть: \r\nВ языке Pascal очень просто вводить числа с клавиатуры: readln (x). \r\nВ языке C# можно вводить только строки, поэтому для для ввода чисел \r\nнеобходимо использовать конвертацию. Используйте три разных способа\r\nдля считывания трёх целых чисел. Каждое число затем увеличьте на 1.\r\n\r\nДано: три целых числа на трёх строчках\r\nНадо: увеличенные три числа на одной строке через пробел', ''),
	(1643, 'ru', 'Операции', 'На одной строке вводятся два целых числа через пробел.\r\nТребуется выполнить для них основные арифметические операции: сложение, вычитание, умножение, целочисленное деление, получение остатка от целочисленного деления. Вывести результат в консоль.\r\n\r\n<strong>Начальные данные</strong>: два числа в одной строке через пробел в диапазоне от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: 5 результатов выполнения арифметических операций на 5 строчках:\r\n<ul><li>сумма</li><li>разность</li><li>произведение</li><li>частное</li><li>остаток от деления</li></ul>', ''),
	(1645, 'ru', 'Формат', 'Дано натуральное число от 0 до 99999. Вывести его на трех строчках в следующих форматах\r\n - с выравниванием по левому краю\r\n - с предшествующими нулями (всего 5 знакомест)\r\n - с выравниванием по правому краю (всего 5 знакомест)\r\n\r\n<strong>Начальные данные</strong>: натуральное число от 1 до 99999\r\n<strong>Вывод результата</strong>: три числа на трех строчках согласно условию.\r\n', ''),
	(1647, 'ru', 'Инкремент', 'Вводится целое число.\r\nВывести на первой строке 5 чисел подряд, начиная со введенного, разделив их пробелом.\r\nНа второй строке те же 5 чисел, но в обратном порядке.\r\n\r\n<strong>Начальные данные</strong>: одно целое число от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: 2 строки по 5 целых чисел, разделенных пробелом.', ''),
	(1652, 'ru', 'Четное двузначное число', 'Дано целое неотрицательное число. Определить, является ли это число четным двузначным. Если является, вывести "YES", иначе - "NO".\r\n\r\n<strong>Начальные данные</strong>: одно целое число от 0 до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: "YES" или "NO" в зависимости от результата.\r\n', ''),
	(1653, 'ru', 'Логика', 'Ввести два целых числа. Вычислить логическое произведение (И), логическую сумму (ИЛИ) и исключающее ИЛИ этих чисел.\r\n\r\n<strong>Начальные данные</strong>: два числа через пробел в диапазоне от 0 до 255.\r\n<strong>Вывод результата</strong>: три числа согласно условию, по одному в каждой строчке', 'pDAkYWPCk9E'),
	(1654, 'ru', 'Сдвиг', 'Дано 1-байтное число x. Вывести x/4 (целую часть), используя поразрядный сдвиг вправо (двойное больше) >>\r\nВывести x*8, используя поразрядный сдвиг влево (двойное меньше) <<\r\n\r\n<strong>Начальные данные</strong>: одно число в диапазоне от 0 до 255\r\n<strong>Вывод результата</strong>: два числа на двух строчках согласно условию\r\n\r\nПримечание: Деление числа на 2 соответствует сдвигу числа вправо на 1 разряд\r\nУсножение числа на 2 соответствует сдвигу числа влево на 1 разряд', 'apzqffEtYeg'),
	(1655, 'ru', 'Границы', 'Требуется вывести на экран минимально возможное и максимально возможное значение всех встроенных целых типов:\r\n<b>sbyte, byte, short, ushort, int, uint, long, ulong.</b>\r\n\r\nНа каждой строчке выводится название типа и граничные значения.\r\n\r\n<strong>Начальные данные</strong>: нет.\r\n<strong>Вывод результата</strong>: 8 строчек с названием типа и его граничными значениями.', '76MYqdyhQYY'),
	(1656, 'ru', 'Цифробайты', 'Суть:\r\nЕсть ещё один способ считывания числа - базовое чтение по одному байту.\r\nКаждый байт конвертируется в цифру и собирается в число.\r\nСчитайте таким способом число из трёх цифр, \r\nнайдите сумму его цифр и квадрат всего числа.\r\n\r\nДано: три цифры на одной строке, без пробелов\r\nНадо: два числа через пробел - сумма цифр и квадрат числа\r\n', 'TmEzkUDQ9bs'),
	(1657, 'ru', 'Максимум', 'Вводятся 2 числа. Вывести максимальное из этих чисел.\r\n\r\nРешить задачу двумя способами:\r\n1. Используя условный оператор if\r\n2. Используя тернарный оператор ? :\r\n\r\n<strong>Начальные данные</strong>: два целых числа на двух строчках в диапазоне от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: дважды максимальное число на двух строках.', 'Fagvn-tDka8'),
	(1658, 'ru', 'Три числа', 'Вводятся 3 числа.\r\nПроверить равны ли они.\r\nВывести \'YES\' - если они равны, \'NO\' - в противном случае.\r\n\r\n<strong>Начальные данные</strong>: три целых числа на одной строке через пробел.\r\n<strong>Диапазон значений</strong>: каждое число от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: YES или NO.', 'cMF3h9W57wk'),
	(1659, 'ru', 'Модуль', 'Дано число.\r\nНайти его модуль.\r\n\r\n<strong>Начальные данные</strong>: целое число.\r\n<strong>Диапазон значений</strong>: число от -10<sup>18</sup> до 10<sup>18</sup>.\r\n<strong>Вывод результата</strong>: модуль числа.', 'u9LQPn5mz4s'),
	(1660, 'ru', 'Сумма положительных', 'Даны 5 целых чисел. Вывести сумму положительных.\r\n\r\n<strong>Начальные данные</strong>: 5 целых чисел на одной строке через пробел.\r\n<strong>Диапазон значений</strong>: каждое число от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: 1 число.', 'W8DwqrW_IMA'),
	(1661, 'ru', '010.Условия', 'Даны целые числа a, b, c. \r\nОпределить, верно ли, что значение числа b \r\nнаходится между значениями чисел a и с.\r\nЕсли верно, то вывести эти числа в строчку через пробел по возрастанию.\r\nЕсли не верно, то вывести слово "NO".\r\n\r\n<strong>Начальные данные</strong>: 3 числа на одной строке через пробел.\r\n<strong>Диапазон значений</strong>: каждое число от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: три числа через пробел или слово "NO".\r\n', ''),
	(1662, 'ru', 'Минимальное расстояние', 'Даны целые числа a,b,c,d. Определить минимальное расстояние a-b, b-c, c-d, d-a.\r\n\r\n<strong>Начальные данные</strong>: 4 целых чисел на одной строке через пробел.\r\n<strong>Диапазон значений</strong>: каждое число от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: 1 число.', 'rrxKz-FLThg'),
	(1663, 'ru', 'Возрастание', 'Даны 3 целых числа. Вывести их в порядке возрастания.\r\n\r\n<strong>Начальные данные</strong>: 3 числа на одной строке через пробел.\r\n<strong>Диапазон значений</strong>: каждое число от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: 3 числа в столбик.\r\n', 'VE2rUgKm_v0'),
	(1664, 'ru', 'Количество цифр', 'Дано натуральное число N.\r\nНайти количество цифр в этом числе. \r\n\r\n<strong>Начальные данные</strong>: число N.\r\n<strong>Вывод результата</strong>: одно число - количество цифр в числе N.', ''),
	(1665, 'ru', 'Сумма ряда', 'Даны натуральные числа x, N, 1&lt;x&lt;N. \r\nНайти сумму ряда x+x<sup>2</sup>+x<sup>3</sup>+… \r\nВычисления закончить, когда x<sup>i</sup>&gt;=N\r\n\r\n\r\n<strong>Начальные данные</strong>: два числа через пробел.\r\n<strong>Вывод результата</strong>: одно число - сумма ряда.', 'CwQYPAjU8Ak'),
	(1666, 'ru', '011.Циклы', 'Дано действительное положительное число 0 < &epsilon; <= 1.\r\nВывести номер i и значение a<sub>i</sub> первого члена последовательности, меньше или равного &epsilon;. \r\nЧлены последовательности рассчитываются по формуле\r\n<img src=\'/data/img/console/196.png\'/><br /><br />\r\n\r\n<strong>Начальные данные</strong>: одно действительное число.\r\n<strong>Вывод результата</strong>: два числа на двух строчках: \r\nномер первого члена, меньшего &epsilon;\r\nего значение в экспоненциальной форме с точностью 6 знаков.\r\n\r\n* Начиная с какого номера i значения элементов последовательности не помещаются в стандартный тип double и становятся равными нулю?', ''),
	(1667, 'ru', 'Сумма цифр', 'Дано целое число N от 0 до 123456789123456789. Найти сумму его цифр. \r\n\r\n<strong>Начальные данные</strong>: число N.\r\n<strong>Вывод результата</strong>: одно число - сумма цифр в числе N.\r\n', 'rmIAwAzL1Sc'),
	(1668, 'ru', 'Улыбки', 'Дано целое число N от 0 до 100.\r\nВывести N смайликов :) в строчку.\r\n\r\n<strong>Начальные данные</strong>: одно число\r\n<strong>Вывод результата</strong>: строчка из смайликов\r\n\r\nРешить задачу три раза с использованием разных циклов.', 'Aw92Z19ndOw'),
	(1669, 'ru', 'Степень', 'Даны целые числа X>=0 и Y>=0. Вычислить X<sup>Y</sup>\r\n\r\n<strong>Начальные данные</strong>: два целых числа через пробел\r\n<strong>Вывод результата</strong>: одно число по условию.', 'LhdnUleL_bg'),
	(1671, 'ru', 'Среднее арифметическое', 'Даны N (от 1 до 100) целых чисел. \r\nПосчитать среднее арифметическое значение этих чисел, и вывести его.\r\nРезультат округлить до десятых.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел, разделенных пробелом.\r\n<strong>Вывод результата</strong>: округлённое до десятых среднее арифметическое значение.\r\n\r\nПолезные ссылки: <a href=\'http://ru.wikipedia.org/wiki/Среднее_арифметическое\' target=\'_blank\'>Среднее арифметическое</a>', 'XHnZM3X8dqw'),
	(1672, 'ru', 'Факториал', 'Вычислить факториал числа с использованием рекурсии.\r\n\r\nНачальные данные: целое число N (0 <= N <= 20)\r\nВывод результата: факториал числа N\r\n', 'QTeeDAsy8Y8'),
	(1673, 'ru', 'Числа Фибоначчи', 'Последовательность Фибоначчи начинается с двух единиц, \r\nи далее каждый последующий элемент равен сумме двух предыдущих:\r\n1 1 2 3 5 8 13 ...\r\n\r\nНаписать рекурсивную функцию для нахождения N-ого числа Фибоначчи.\r\n\r\nНачальные данные: целое число N (1 <= N <= 20)\r\nВывод результата: N-ое число Фибоначчи', 'KV_H82FcGoU'),
	(1674, 'ru', 'Общий делитель', 'Написать рекурсивный алгоритм нахождения наибольшего общего делителя двух чисел.\r\n\r\nНачальные данные: два натуральных числа на двух строчках\r\nВывод результата: одно число - наибольший общий делитель данных чисел\r\n\r\n<b>Идея алгоритма:</b>\r\nОтнимать от большего меньшее, пока числа не станут равны.\r\nПолученное число и является наибольшим общим делителем.\r\n\r\n<b>Пример:</b>\r\n20 и 15, вычитаем 20 - 15 = 5\r\n5 и 15, вычитаем 15 - 5 = 10\r\n5 и 10, вычитаем 10 - 5\r\n5 и 5, равны, НОД = 5.', 'K7mtl9bh3H0'),
	(1675, 'ru', 'Обратный отсчёт', 'Вводится ряд целых чисел, заканчивающийся нулём.\r\nВывести эти числа в столбик в обратном порядке, включая 0.\r\nИспользовать рекурсию.\r\n\r\nНачальные данные: много чисел, по одному на строчке, последнее число равно нулю.\r\nВывод результата: те же самые числа в столбик, но в обратном порядке.\r\n', '-LWGXDnzBEY'),
	(1676, 'ru', 'Первый и последний', 'Дан массив из N (от 1 до 100) целых чисел.\r\nВывести первый и последний его элементы.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел через пробел - элементы массива.\r\n<strong>Вывод результата</strong>: строка, в которой первый и последний элементы массива выведены через пробел.', '3CeGMhV7IUU'),
	(1677, 'ru', 'Инкремент', 'Дан массив из N (от 1 до 100) целых чисел.\r\nУвеличить каждый элемент на 1, вывести все элементы.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел - элементы массива.\r\n<strong>Вывод результата</strong>: строка, в которой все элементы отредактированного массива выведены через запятую. После последнего элемента массива поставьте точку.', 'Z39IMX5AeOA'),
	(1678, 'ru', 'Мульти возведение', 'Дан массив из N (от 1 до 100) целых чисел.\r\nУмножить элементы с нечётными индексами (1, 3, 5, ...) на 2, \r\nс чётными индексами (0, 2, 4, ...) возвести в квадрат, \r\nвывести все элементы.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел - элементы массива.\r\n<strong>Вывод результата</strong>: строка, в которой все элементы отредактированного массива выведены через пробел.', 'RAL5ScdlA4Y'),
	(1679, 'ru', 'Мини-максимум', 'Дан массив из N (от 1 до 100) целых чисел. \r\nНайти минимальное и максимальное значения в массиве, вывести их.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел - элементы массива.\r\n<strong>Вывод результата</strong>: строка, содержащая два числа - минимум и максимум массива, выведенные через пробел.', 'wr579PxLndw'),
	(1680, 'ru', 'Обмен', 'Дан массив из N (от 1 до 100) различных целых чисел. \r\nПоменять местами максимальный и минимальный элементы,\r\nвывести все элементы.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел - элементы массива.\r\n<strong>Вывод результата</strong>: строка, в которой все элементы отредактированного массива выведены через пробел.', 'CEHAHMXzvqg'),
	(1681, 'ru', 'Единичный массив', 'Дано число N от 1 до 100.\r\nСоздать массив из N целых чисел и заполнить все ячейки единицами. \r\nВывести массив в столбик, по одному числу в строчке.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N.\r\n<strong>Вывод результата</strong>: массив из N единиц, значение каждой ячейки в отдельной строке.', 'YfYUGt8ryjY'),
	(1682, 'ru', 'Баранки', 'Дан массив из N (от 1 до 100) целых чисел. \r\nПосчитать, сколько в нём нулевых элементов, вывести их количество.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел - элементы массива.\r\n<strong>Вывод результата</strong>: строка, содержащая одно число - количество нулевых элементов в массиве.', 'PkAFUw9Pkfw'),
	(1683, 'ru', 'Порядок', 'Дан массив из N (от 1 до 100) целых чисел.\r\nВывести его элементы в обратном порядке.\r\n\r\n<strong>Начальные данные</strong>: в первой строке ввода содержится число N, во второй строке N чисел - элементы массива.\r\n<strong>Вывод результата</strong>: строка, в которой все элементы массива выведены в обратном порядке через пробел.', ''),
	(1684, 'ru', 'Минимум и максимум', 'Написать две функции - нахождения минимума и максимума из двух целых чисел.\r\n\r\nВводится 5 целых чисел, найти минимальное и максимальное среди них.\r\n\r\nРешить используя написанные функции.\r\n\r\n<strong>Начальные данные</strong>: 5 чисел, записанных через пробел\r\n<strong>Вывод результата</strong>: два числа на двух строчках, минимальное и максимальное', '7JXalFDJBvw'),
	(1685, 'ru', 'Степень', 'Дано пять натуральных чисел: a, b, c, d, e (каждое от 1 до 123456789).\r\n\r\nНаписать функцию возведения числа в степень.\r\nИспользуя эту функцию вычислить:\r\na<sup>b</sup> + b<sup>c</sup> + c<sup>d</sup> + d<sup>e</sup> + e<sup>a</sup>\r\n\r\n<strong>Начальные данные</strong>: 5 натуральных чисел по одному на строке.\r\n<strong>Вывод результата</strong>: одно число - значение выражения.', 'RNnjjLqAXhI'),
	(1686, 'ru', 'Треугольники', 'Даны длины пяти отрезков, все отрезки разной длины.\r\nСколько разных треугольников можно из них сделать?\r\n\r\nСоздать функцию, которая по длинам трёх отрезков определяет - возможно ли из них составить треугольник. \r\nТреугольник можно составить тогда и только тогда, когда каждый отрезок меньше суммы двух других отрезков.\r\n\r\n<strong>Начальные данные</strong>: 5 натуральных чисел, записанных на одной строке через пробел.\r\n<strong>Вывод результата</strong>: одно число - сколько разных треугольников можно составить.\r\n', 'rbthrEe2ic4'),
	(1687, 'ru', 'Звезда', '<img src=\'/data/img/console/212.png\'>Написать функцию, которая находит расстояние между двумя точками.\r\n\r\nДаны координаты вершин выпуклого пятиугольника, найти сумму его диагоналей,\r\nиспользуя написанную функцию. \r\n\r\n<strong>Начальные данные</strong>: 5 строчек по 2 числа на каждой - \r\nкоординаты вершин выпуклого пятиугольника, в порядке против часовой стрелки.\r\n\r\n<strong>Вывод результата</strong>: одно вещественное число с точностью до сотых - сумма диагоналей пятиугольника.\r\nОтвет округлить до сотых. \r\n', '5oUtkKJI6pQ'),
	(1688, 'ru', 'Корни', 'По заданному значению N от 1 до 10 найти значение выражения: \r\n<img src="http://videosharp.info/data/img/console/235.jpg", align="bottom"><br /><br /><br /><br /><br /><br />\r\n<strong>Начальные данные</strong>: число N.\r\n<strong>Вывод результата</strong>: ответ на задачу - число с точностью до 4-го знака после запятой.', 'RQ_Auf2Z1NY'),
	(1689, 'ru', 'Тригонометрия', 'Вводится вещественное значение y. Для x в промежутке [-0,5; 0,5] с шагом 0,1 вычислить значение z по формуле. \r\n<img src = "http://videosharp.info/data/img/console/1189.png"><br /><br /><br />\r\n\r\n<strong>Начальные данные</strong>: вещественное число - значение y.\r\n<strong>Вывод результата</strong>: значения в столбик с точностью до 5 знаков после запятой. \r\n', 'RFMNXc89F3o'),
	(1690, 'ru', 'Параметрическая функция', 'Для t &isin; [0;7] с шагом 0,1 вычислить значения функций \r\n<pre>x=sin(3t)+3cos(t) \r\ny=cos(2t)</pre>Результат вывести в виде таблицы.\r\n\r\n<strong>Начальные данные</strong>: нет.\r\n<strong>Вывод результата</strong>: значения в виде таблицы:\r\n<pre>-------------------------\r\n|  t  |   x    |   y    |\r\n-------------------------\r\n| 0.0 |  3.000 |  1.000 |\r\n| 0.1 |  3.281 |  0.980 |\r\n   и т.д.\r\n-------------------------</pre>t - 3 знакоместа, 1 знак после запятой\r\nx - 6 знакомест, 3 знака после запятой\r\ny - 6 знакомест, 3 знака после запятой.', 'MMmLINeW2c0'),
	(1691, 'ru', 'Квадратное уравнение', 'Вводятся коэффициенты a, b, c квадратного уравнения.\r\nax<sup>2</sup>+bx+c=0.\r\nНайти значения корней уравнения.\r\nЕсли уравнение имеет 2 корня, то вывести их через пробел, начиная с наименьшего.\r\nЕсли уравнение имеет 1 корень, вывести его.\r\nЕсли уравнение не имеет действительных корней, вывести "NO".\r\n\r\n<strong>Начальные данные</strong>: три целых числа на строке через пробел, каждое число от -10<sup>9</sup> до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: корни квадратного уравнения согласно условию.', ''),
	(1692, 'ru', 'Площадь круга', 'Вводится вещественное значение радиуса круга r. Найти площадь круга. \r\n\r\nПлощадь круга вычисляется по формуле S = &pi; &middot; r<sup>2</sup>.\r\n\r\n<strong>Начальные данные</strong>: вещественное число - радиус круга.\r\n<strong>Вывод результата</strong>: вещественное число - площадь круга с точностью до 4 знаков после запятой. ', ''),
	(1693, 'ru', 'Удивительные корни', 'По заданному значению N от 1 до 100 найти значение выражения: \r\n<img src="http://videosharp.info/data/img/console/236.png", align="bottom"><br /><br /><br /><br /><br /><br /><br /><br />\r\n<strong>Начальные данные</strong>: число N.\r\n<strong>Вывод результата</strong>: ответ на задачу - число с точностью до 5-го знака после запятой.', 'vO9kLO_UVA4'),
	(1694, 'ru', '101.Математика', 'Площадь треугольника\r\n\r\nНайти площадь треугольника, вершины которого находятся в точках A, B, C.\r\n\r\n<strong>Начальные данные</strong>: координаты точек A, B, C на трех строчках.\r\n<strong>Вывод результата</strong>: одно число - площадь треугольника с точностью до 4 знаков после запятой.\r\n\r\nПодсказка: воспользуйтесь формулой Герона, формулой нахождения расстояния между двумя точками.\r\n<img class="width-100" src="/data/img/console/1694.png">', ''),
	(1695, 'ru', 'Без остатка', 'Необходимо вывести на экран те числа, которые делятся на 7 без остатка и находятся в диапазоне от 1 до 100.\r\n\r\n<strong>Начальные данные</strong>: нет\r\n<strong>Вывод результата</strong>: целые числа в столбик согласно условию.', 'OFbpApBDZtA'),
	(1696, 'ru', 'Делитель Макса', 'Дано натуральное число.\r\nНайти его максимальный делитель, меньший самого числа.\r\n\r\n<strong>Начальные данные</strong>: 1 натуральное число от 1 до 10<sup>9</sup>.\r\n<strong>Вывод результата</strong>: 1 натуральное число согласно условию.\r\n', 'gcJRSJPITQU'),
	(1697, 'ru', 'Формула', 'Вводятся а, x.\r\nНайти значение функции. \r\nОтвет вывести с точностью 4 знака после запятой.\r\n<img src=\'/data/img/real/vev_real_2.gif\'>\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'N6JTlakXmJQ'),
	(1706, 'ru', 'Количество', 'На вход программы посылается поток байтов.\r\nОпределить общее количество байтов в потоке.\r\n\r\n<strong>Начальные данные</strong>: Поток байтов.\r\n<strong>Вывод результата</strong>: Целое число - количество байтов в потоке.\r\n\r\nПРИМЕЧАНИЕ\r\nВидеоурока на C# пока нет, \r\nпоэтому прикладываю Java-видеоурок, \r\nчтобы была понятна идея этого раздела.\r\n\r\nВот схема решения для этой программы:\r\n<pre>        int count = 0;\r\n        Stream str = Console.OpenStandardInput();\r\n        while (true)\r\n	{\r\n            int x = str.ReadByte();\r\n  	    if (x == -1) break; // CTRL Z\r\n	    count ++;\r\n	}\r\n        Console.WriteLine(count);\r\n</pre>\r\n', 'D7RpmP931s0'),
	(1707, 'ru', 'Средний байт', 'На вход программы посылается поток байтов.\r\n\r\nНайти среднее арифметическое всех байтов.\r\nЕсли поток пустой, считать ответ равным нулю.\r\n\r\n<strong>Начальные данные</strong>: Поток байтов.\r\n<strong>Вывод результата</strong>: Вещественное число double с точностью до 3 знаков после запятой.\r\n', ''),
	(1708, 'ru', 'Минимакс потока', 'На вход программы посылается поток байтов.\r\n\r\nНайти минимальное и максимальное значение.\r\nЕсли поток пустой, вывести на экран два нуля.\r\n\r\n<strong>Начальные данные</strong>: Поток байтов.\r\n<strong>Вывод результата</strong>: Два целых числа через пробел, минимальное и максимальное значение.\r\n', 'apnE-232Hh4'),
	(1709, 'ru', 'Повторение рекорда', 'На вход программы посылается поток байтов.\r\n\r\nНайти в потоке максимальное значение и количество его повторений.\r\nЕсли поток пустой, оба ответа считать равным нулю.\r\n\r\n<strong>Начальные данные</strong>: Поток байтов.\r\n<strong>Вывод результата</strong>: Два числа через пробел, максимальное значение и количество его повторений.\r\n', ''),
	(1710, 'ru', 'Излучатель пустоты', 'На вход программы посылается поток байтов.\r\n\r\nПодсчитать, сколько раз повторяется слово «void».\r\nПодсказка: предварительно составьте последовательность байт для искомого слова.\r\n\r\n<strong>Начальные данные</strong>: Поток байтов.\r\n<strong>Вывод результата</strong>: Одно число - количество вхождений слова void.', ''),
	(1711, 'ru', 'Лесенка', 'На вход программы посылается поток байтов.\r\n\r\nВывести на экран увеличивающиеся элементы из потока, начиная с первого.\r\nНайденные элементы выводить на экран сразу, не ожидая окончания потока.\r\nПри выводе на экран конвертировать числа в символы.\r\n\r\n<strong>Начальные данные</strong>: Поток байтов.\r\n<strong>Вывод результата</strong>: Последовательность символов на одной строке.', ''),
	(1712, 'ru', 'Сумма троек', 'На вход программы посылается поток байтов.\r\n\r\nВыводить на экран сумму чисел каждой тройки \r\nпоследовательных элементов из потока. \r\nНа выходе будет на два числа меньше, чем на входе.\r\nНайденные элементы выводить на экран сразу, не ожидая окончания потока.\r\n\r\n<strong>Начальные данные</strong>: Поток байтов.\r\n<strong>Вывод результата</strong>: Последовательность чисел, по одному на каждой строке.', ''),
	(1713, 'ru', 'Средний сосед', 'На вход программы посылается поток байтов.\r\n\r\nВыводить на экран те элементы из потока, которые больше предыдущего, \r\nно меньше последующего. На выходе будет на два символа меньше, чем на входе.\r\nНайденные элементы выводить на экран в виде символов в одну строку.\r\nРезультаты печатать сразу, не ожидая окончания потока.\r\n\r\n<strong>Начальные данные</strong>: Поток байтов.\r\n<strong>Вывод результата</strong>: Последовательность символов на одной строке.', ''),
	(1720, 'ru', 'Неделька', 'Вводится целое значение дня недели. Вывести название дня недели по его номеру. \r\n1 - понедельник\r\n2 - вторник\r\n3 - среда\r\n4 - четверг\r\n5 - пятница\r\n6 - суббота\r\n7 - воскресенье \r\n\r\n<strong>Начальные данные</strong>: одно целое число от 1 до 7 - день недели\r\n<strong>Вывод результата</strong>: название дня недели на русском языке', 'yT3eRk8981c'),
	(3665, 'ru', '000.Строки', 'Вводится фраза, в которой есть текст в круглых скобках.\r\nНа следующей строчке записан дополнительный текст.\r\n\r\nНеобходимо удалить содержимое скобок в фразе, сами скобки оставить,\r\nа затем внутрь скобок добавить дополнительный текст.\r\n\r\nЕсли во фразе несколько пар скобок - убрать текст только внутри первой пары скобок.\r\nВариант вложенных скобок не рассматривается.\r\n\r\nНачальные данные: две строки - фраза со скобками и дополнительный текст.\r\nВывод результата: одна строка - исправленная фраза.\r\n\r\nМатериал для самостоятельного изучения и решения задачи:\r\n<ul><li><a href="http://msdn.microsoft.com/ru-ru/library/system.string.remove(v=vs.110).aspx">String.Remove - метод (MSDN)</a> - изучить оба варианта метода.</li></ul>', ''),
	(3666, 'ru', '001.Числа', 'Маленький мальчик очень любит цифры, потому что они маленькие.\r\nА вот числа он не очень любит, потому что они большие.\r\nПоэтому когда он видит число, он сразу складывает его цифры, чтобы уменьшить его.\r\nЕсли получается цифра, то он радуется, потому что она маленькая. \r\nА если нет, то очень огорчается и пробует снова - складывает цифры нового числа.\r\nИ только когда получится одна цифра - маленький мальчик радуется и смеётся.\r\n\r\nПомогите мальчику найти окончательную маленькую цифру и получить радость.\r\n\r\nНачальные данные: одно целое число, от 0 до 123456789.\r\nВывод результата: окончательная цифра.', ''),
	(3669, 'ru', '100.Массивы', 'Решето Эратосфена.\r\n\r\nВводится число N (2 <= N <= 10000).\r\nСоздать массив R из N элементов с индексами от 0 до N.\r\nПервые два элемента массива R[0] и R[1] не будут использоваться.\r\n\r\nЗаполнить массив R значениями его индексов. \r\nОбнулить все элементы, кратные 2 (кроме 2-ого).\r\nОбнулить все кратные 3 (кроме 3-го).\r\nи так далее до всех элементов, кратных [sqrt(N)].\r\n\r\nВывести в столбик оставшиеся необнуленные элементы. \r\nОни окажутся простыми числами. ', ''),
	(3672, 'ru', '111.Потоки', 'Числа в кавычках\r\n\r\nНа вход программы посылается текст в виде потока байтов-символов.\r\n\r\nЧислом называется любая последовательность цифр от 0-9.\r\nНеобходимо каждое число поместить в кавычки.\r\nРезультаты печатать сразу, не ожидая окончания потока.\r\n\r\n<strong>Начальные данные</strong>: Текст в виде потока байтов.\r\n<strong>Вывод результата</strong>: Преобразованный текст с симоволом новой строки в конце.', ''),
	(3673, 'ru', '110.Функция', 'НОД - Наибольший общий делитель\r\nНОК - Наименьшее общее кратное\r\n\r\nНаписать функцию которая находит НОД двух чисел.\r\nНаписать функцию которая находит НОК двух чисел.\r\nИспользуя эти функции сложить три дроби и упростить результат.\r\n\r\n<strong>Начальные данные</strong>: 3 дроби на трёх строчках.\r\nКаждая дробь задаётся двумя натуральными числами, записанными через пробел: числитель и знаменатель.\r\n<strong>Вывод результата</strong>: два числа через пробел - числитель и знаменатель полученной в ответе дроби.\r\n\r\nВсе числа помещаются в long.\r\n\r\nПримечание: \r\nДля сложения дробей необходимо их привести к общему знаменателю - НОК всех знаменателей.\r\nHOK (a, b) = a * b / НОД (a, b)\r\nНОК (a, b, c) = НОК(НОК(a, b), c)\r\n\r\n', '');
/*!40000 ALTER TABLE `taskDict` ENABLE KEYS */;

-- Dumping structure for table ROBOT.test
DROP TABLE IF EXISTS `test`;
CREATE TABLE IF NOT EXISTS `test` (
  `taskId` int(11) NOT NULL,
  `testNr` int(11) NOT NULL,
  `fileIn` text,
  `fileOut` text,
  PRIMARY KEY (`taskId`,`testNr`),
  CONSTRAINT `FK_test_task` FOREIGN KEY (`taskId`) REFERENCES `task` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table ROBOT.test: ~433 rows (approximately)
/*!40000 ALTER TABLE `test` DISABLE KEYS */;
INSERT INTO `test` (`taskId`, `testNr`, `fileIn`, `fileOut`) VALUES
	(1194, 0, '5\r\n3 5 0 4 9', '0 9\r\n'),
	(1194, 1, '5\r\n156 284 -854 -179 -631', '-854 284\r\n'),
	(1194, 2, '10\r\n684 563 -408 530 -491 -670 -961 677 -135 -634', '-961 684\r\n'),
	(1194, 3, '20\r\n386 84 -929 964 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 -975 -726 767', '-975 964\r\n'),
	(1194, 4, '40\r\n-122 -478 515 -835 742 620 -26 606 768 -675 -366 -154 -545 -601 811 -23 -468 244 557 88 -844 735 950 -93 35 -934 171 975 -117 541 689 -987 403 98 487 -137 568 906 -779 -87', '-987 975\r\n'),
	(1634, 0, 'формула программиста', 'формула программиста\r\nформула программиста\r\n'),
	(1634, 1, 'Дядюшка Эхо', 'Дядюшка Эхо\r\nДядюшка Эхо\r\n'),
	(1634, 2, 'Привет, мир!', 'Привет, мир!\r\nПривет, мир!\r\n'),
	(1634, 3, 'videosharp.info', 'videosharp.info\r\nvideosharp.info\r\n'),
	(1634, 4, 'Первая строчка текста', 'Первая строчка текста\r\nПервая строчка текста\r\n'),
	(1635, 0, 'Да будет мир во всём Мире!\r\nПусть все будут здоровы!', '26 24\r\n'),
	(1635, 1, '121020102102012\r\n.', '15 1\r\n'),
	(1635, 2, 'Мой лучший лозунг!\r\nМой лучший лозунг!', '18 18\r\n'),
	(1635, 3, 'Мой лучший лозунг\r\nМой лучший лозунг!', '17 18\r\n'),
	(1635, 4, '.\r\n.', '1 1\r\n'),
	(1636, 0, 'Раз два три четыре пять ', 'Раз\r\nдва\r\nтри\r\nчетыре\r\nпять\r\n'),
	(1636, 1, 'Зимой как всегда идёт снег', 'Зимой\r\nкак\r\nвсегда\r\nидёт\r\nснег\r\n'),
	(1636, 2, '1 2 3 4 5', '1\r\n2\r\n3\r\n4\r\n5\r\n'),
	(1637, 0, 'Не лает, не кусает, а в дом не пускает (замок).', 'замок\r\n'),
	(1637, 1, '(abc)', 'abc\r\n'),
	(1637, 2, 'asdfa () asdfa', '\r\n'),
	(1637, 3, 'hello (a) friend', 'a\r\n'),
	(1637, 4, 'Hello (world)!', 'world\r\n'),
	(1638, 0, 'Раз, два, три, четыре, пять!', '6\r\n'),
	(1638, 1, 'What is your name?', '4\r\n'),
	(1638, 2, 'Today is Friday.', '6\r\n'),
	(1638, 3, 'What time is it?', '4\r\n'),
	(1638, 4, 'Самая длинная строка текста- буква, слово; предложение.', '11\r\n'),
	(1639, 0, 'Да будет мир во всём Мире!\r\nПусть все будут здоровы!', '-1\r\n-1\r\n'),
	(1639, 1, '1234567890\r\n1234567890', '0\r\n0\r\n'),
	(1639, 2, 'Hello World\r\nhELLO wORLD', '1\r\n0\r\n'),
	(1639, 3, 'Where there IS smile?\r\nWhere there IS smi1e', '1\r\n1\r\n'),
	(1639, 4, 'AbbA\r\nAbbA', '0\r\n0\r\n'),
	(1640, 0, 'Выйду в поле с конём...\r\nночью', 'Выйду ночью в поле с конём...\r\n'),
	(1640, 1, '1 2 3 4 5\r\neeee', '1 eeee 2 3 4 5\r\n'),
	(1640, 2, '1  2\r\nx', '1 x  2\r\n'),
	(1640, 3, 'One Two Three Four Five\r\nhalf-life', 'One half-life Two Three Four Five\r\n'),
	(1640, 4, 'Выхожу я на дорогу...\r\nодин', 'Выхожу один я на дорогу...\r\n'),
	(1641, 0, '[      12345   ]', '[12345   ]\r\n[      12345]\r\n[12345]\r\n'),
	(1641, 1, '[abc      ]', '[abc      ]\r\n[abc]\r\n[abc]\r\n'),
	(1641, 2, '[       abc]', '[abc]\r\n[       abc]\r\n[abc]\r\n'),
	(1641, 3, '[	www 	  ]', '[www 	  ]\r\n[	www]\r\n[www]\r\n'),
	(1641, 4, '[    750]', '[750]\r\n[    750]\r\n[750]\r\n'),
	(1641, 5, '[750          ]', '[750          ]\r\n[750]\r\n[750]\r\n'),
	(1642, 0, '10\r\n20\r\n50\r\n', '11 21 51\r\n'),
	(1642, 1, '-2\r\n-1\r\n0', '-1 0 1\r\n'),
	(1642, 2, '0\r\n0\r\n0', '1 1 1\r\n'),
	(1642, 3, '2465236\r\n2365246\r\n3465256', '2465237 2365247 3465257\r\n'),
	(1642, 4, '-4654352423\r\n5646875766\r\n557657657', '-4654352422 5646875767 557657658\r\n'),
	(1642, 5, '-2000000000\r\n1999999999\r\n999999999\r\n', '-1999999999 2000000000 1000000000\r\n'),
	(1643, 0, '1024 16', '1040\r\n1008\r\n16384\r\n64\r\n0\r\n'),
	(1643, 1, '3562356 234562', '3796918\r\n3327794\r\n-1925274648\r\n15\r\n43926\r\n'),
	(1643, 2, '-243577 243577', '0\r\n-487154\r\n799787215\r\n-1\r\n0\r\n'),
	(1643, 3, '99999999 2', '100000001\r\n99999997\r\n199999998\r\n49999999\r\n1\r\n'),
	(1643, 4, '99999999 1', '100000000\r\n99999998\r\n99999999\r\n99999999\r\n0\r\n'),
	(1645, 0, '1', '1\r\n00001\r\n    1\r\n'),
	(1645, 1, '30', '30\r\n00030\r\n   30\r\n'),
	(1645, 2, '9999', '9999\r\n09999\r\n 9999\r\n'),
	(1645, 3, '0', '0\r\n00000\r\n    0\r\n'),
	(1645, 4, '10', '10\r\n00010\r\n   10\r\n'),
	(1647, 0, '5', '5 6 7 8 9\r\n9 8 7 6 5\r\n'),
	(1647, 1, '1', '1 2 3 4 5\r\n5 4 3 2 1\r\n'),
	(1647, 2, '-100', '-100 -99 -98 -97 -96\r\n-96 -97 -98 -99 -100\r\n'),
	(1647, 3, '1000000', '1000000 1000001 1000002 1000003 1000004\r\n1000004 1000003 1000002 1000001 1000000\r\n'),
	(1647, 4, '1000', '1000 1001 1002 1003 1004\r\n1004 1003 1002 1001 1000\r\n'),
	(1652, 0, '12', 'YES\r\n'),
	(1652, 1, '37', 'NO\r\n'),
	(1652, 2, '1', 'NO\r\n'),
	(1652, 3, '10', 'YES\r\n'),
	(1652, 4, '99', 'NO\r\n'),
	(1652, 5, '100', 'NO\r\n'),
	(1652, 6, '9', 'NO\r\n'),
	(1652, 7, '0', 'NO\r\n'),
	(1652, 8, '1000000000', 'NO\r\n'),
	(1652, 9, '56', 'YES\r\n'),
	(1653, 0, '3 5', '1\r\n7\r\n6\r\n'),
	(1653, 1, '7 6', '6\r\n7\r\n1\r\n'),
	(1653, 2, '128 129', '128\r\n129\r\n1\r\n'),
	(1653, 3, '5 2', '0\r\n7\r\n7\r\n'),
	(1653, 4, '255 1', '1\r\n255\r\n254\r\n'),
	(1654, 0, '8', '2\r\n64\r\n'),
	(1654, 1, '32', '8\r\n256\r\n'),
	(1654, 2, '5', '1\r\n40\r\n'),
	(1654, 3, '20', '5\r\n160\r\n'),
	(1654, 4, '100', '25\r\n800\r\n'),
	(1654, 5, '113', '28\r\n904\r\n'),
	(1655, 0, '-', 'sbyte -128 127\r\nbyte 0 255\r\nshort -32768 32767\r\nushort 0 65535\r\nint -2147483648 2147483647\r\nuint 0 4294967295\r\nlong -9223372036854775808 9223372036854775807\r\nulong 0 18446744073709551615\r\n'),
	(1656, 0, '256\r\n', '13 65536\r\n'),
	(1656, 1, '081', '9 6561\r\n'),
	(1656, 2, '999\r\n', '27 998001\r\n'),
	(1656, 3, '000\r\n', '0 0\r\n'),
	(1656, 4, '015', '6 225\r\n'),
	(1656, 5, '400\r\n', '4 160000\r\n'),
	(1656, 6, '125\r\n', '8 15625\r\n'),
	(1656, 7, '708\r\n', '15 501264\r\n'),
	(1656, 8, '001\r\n', '1 1\r\n'),
	(1656, 9, '425\r\n', '11 180625\r\n'),
	(1657, 0, '185\r\n534', '534\r\n534\r\n'),
	(1657, 1, '28\r\n-14', '28\r\n28\r\n'),
	(1657, 2, '0\r\n0', '0\r\n0\r\n'),
	(1657, 3, '5\r\n5', '5\r\n5\r\n'),
	(1657, 4, '-813256\r\n-183457', '-183457\r\n-183457\r\n'),
	(1658, 0, '11 11 111', 'NO\r\n'),
	(1658, 1, '12 012 0012', 'YES\r\n'),
	(1658, 2, '0 1 0', 'NO\r\n'),
	(1658, 3, '0 00 000', 'YES\r\n'),
	(1658, 4, '14 -14 14', 'NO\r\n'),
	(1658, 5, '0 -0 -0', 'YES\r\n'),
	(1658, 6, '7654321 7654321 7654321', 'YES\r\n'),
	(1659, 0, '-54321', '54321\r\n'),
	(1659, 1, '54321', '54321\r\n'),
	(1659, 2, '0', '0\r\n'),
	(1659, 3, '-12345678901234567', '12345678901234567\r\n'),
	(1660, 0, '1 2 -3 4 5', '12\r\n'),
	(1660, 1, '-1 -2 -3 4 -5', '4\r\n'),
	(1660, 2, '1 2 0 4 5', '12\r\n'),
	(1660, 3, '1000000 1000000 1000000 -1000000 1000000', '4000000\r\n'),
	(1660, 4, '-1 -2 -3 -4 -5', '0\r\n'),
	(1661, 0, '10 15 80\r\n', '10 15 80\r\n'),
	(1661, 1, '80 40 30\r\n\r\n', '30 40 80\r\n'),
	(1661, 2, '50 50 50\r\n', 'NO\r\n'),
	(1661, 3, '20 20 40\r\n', 'NO\r\n'),
	(1661, 4, '30 50 50\r\n', 'NO\r\n'),
	(1661, 5, '-5050 0 +54572\r\n', '-5050 0 54572\r\n'),
	(1661, 6, '123456789 23456789 3456789\r\n', '3456789 23456789 123456789\r\n'),
	(1661, 7, '-987654321 -987654320 -987654300\r\n', '-987654321 -987654320 -987654300\r\n'),
	(1661, 8, '111111111 222222222 333333333', '111111111 222222222 333333333\r\n'),
	(1661, 9, '333333333 222222222 111111111\r\n', '111111111 222222222 333333333\r\n'),
	(1662, 0, '1 -2 8 7', '1\r\n'),
	(1662, 1, '-2 -5 3 10', '3\r\n'),
	(1662, 2, '2 0 4 10 ', '2\r\n'),
	(1663, 0, '5 3 -2', '-2\r\n3\r\n5\r\n'),
	(1663, 1, '-5 5 3', '-5\r\n3\r\n5\r\n'),
	(1663, 2, '-8 -9 -4', '-9\r\n-8\r\n-4\r\n'),
	(1663, 3, '0 2 0 ', '0\r\n0\r\n2\r\n'),
	(1663, 4, '123456789 123456790 123456788', '123456788\r\n123456789\r\n123456790\r\n'),
	(1664, 0, '123', '3\r\n'),
	(1664, 1, '27634572', '8\r\n'),
	(1664, 2, '123456789123456789', '18\r\n'),
	(1664, 3, '9', '1\r\n'),
	(1664, 4, '0', '1\r\n'),
	(1665, 0, '2 35', '62\r\n'),
	(1665, 1, '3 85', '120\r\n'),
	(1665, 2, '2 3', '2\r\n'),
	(1665, 3, '10 10000', '1110\r\n'),
	(1666, 0, '1', '2\r\n1.000000E+000\r\n'),
	(1666, 1, '0.5', '3\r\n3.333333E-001\r\n'),
	(1666, 2, '0.1', '4\r\n8.333333E-002\r\n'),
	(1666, 3, '0.01', '6\r\n2.777778E-003\r\n'),
	(1666, 4, '0.001', '7\r\n3.968254E-004\r\n'),
	(1666, 5, '1e-5', '9\r\n5.511464E-006\r\n'),
	(1666, 6, '1e-10\r\n', '14\r\n2.294149E-011\r\n'),
	(1666, 7, '1e-50\r\n', '42\r\n1.423481E-051\r\n'),
	(1666, 8, '1e-200\r\n', '121\r\n2.470875E-201\r\n'),
	(1666, 9, '1e-300\r\n', '168\r\n7.917419E-303\r\n'),
	(1667, 0, '123', '6\r\n'),
	(1667, 1, '27634572', '36\r\n'),
	(1667, 2, '123456789123456789', '90\r\n'),
	(1667, 3, '9', '9\r\n'),
	(1667, 4, '10', '1\r\n'),
	(1667, 5, '0', '0\r\n'),
	(1667, 6, '1000000000000011', '3\r\n'),
	(1667, 7, '100', '1\r\n'),
	(1668, 0, '3', ':):):)\r\n'),
	(1668, 1, '1\r\n', ':)\r\n'),
	(1668, 2, '0\r\n', '\r\n'),
	(1668, 3, '100\r\n', ':):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):)\r\n'),
	(1668, 4, '18\r\n', ':):):):):):):):):):):):):):):):):):)\r\n'),
	(1668, 5, '35\r\n', ':):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):):)\r\n'),
	(1668, 6, '2\r\n', ':):)\r\n'),
	(1669, 0, '2 3', '8\r\n'),
	(1669, 1, '3 0', '1\r\n'),
	(1669, 2, '0 2', '0\r\n'),
	(1669, 3, '10 6', '1000000\r\n'),
	(1669, 4, '5 3', '125\r\n'),
	(1671, 0, '4\r\n6 10 10 10', '9.0\r\n'),
	(1671, 1, '5\r\n833 428 79 722 454', '503.2\r\n'),
	(1671, 2, '10\r\n751 658 88 599 382 232 421 432 9 730', '430.2\r\n'),
	(1671, 3, '20\r\n32 822 300 75 847 136 259 845 517 428 341 373 271 254 510 159 260 644 28 972', '403.7\r\n'),
	(1671, 4, '40\r\n205 412 559 932 235 809 372 862 980 956 106 870 55 531 309 341 190 453 158 705 574 582 562 294 113 377 386 834 88 223 972 777 404 36 524 619 263 368 839 37', '472.8\r\n'),
	(1671, 5, '80\r\n764 396 865 560 321 470 317 739 944 169 968 806 485 323 398 623 850 265 819 858 423 538 774 757 983 329 466 19 7 689 77 822 613 121 940 177 717 1 972 642 60 646 889 918 254 166 291 80 638 900 769 998 548 981 614 226 622 108 577 992 3 298 732 255 91 146 192 364 382 220 906 849 293 176 798 776 648 855 502 817', '532.3\r\n'),
	(1672, 0, '4', '24\r\n'),
	(1672, 1, '0', '1\r\n'),
	(1672, 2, '1', '1\r\n'),
	(1672, 3, '2', '2\r\n'),
	(1672, 4, '3', '6\r\n'),
	(1672, 5, '5', '120\r\n'),
	(1672, 6, '10', '3628800\r\n'),
	(1672, 7, '20', '2432902008176640000\r\n'),
	(1673, 0, '4', '3\r\n'),
	(1673, 1, '1', '1\r\n'),
	(1673, 2, '2', '1\r\n'),
	(1673, 3, '3', '2\r\n'),
	(1673, 4, '5', '5\r\n'),
	(1673, 5, '10', '55\r\n'),
	(1673, 6, '20', '6765\r\n'),
	(1674, 0, '20\r\n15', '5\r\n'),
	(1674, 1, '124508\r\n521406\r\n', '2\r\n'),
	(1674, 2, '33333333\r\n1111', '1111\r\n'),
	(1674, 3, '2352345234523\r\n234523452345\r\n', '1\r\n'),
	(1675, 0, '10\r\n20\r\n30\r\n0\r\n', '0\r\n30\r\n20\r\n10\r\n'),
	(1675, 1, '1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n11\r\n22\r\n33\r\n44\r\n55\r\n66\r\n77\r\n88\r\n99\r\n0\r\n', '0\r\n99\r\n88\r\n77\r\n66\r\n55\r\n44\r\n33\r\n22\r\n11\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n'),
	(1675, 2, '0\r\n', '0\r\n'),
	(1675, 3, '123456789\r\n0\r\n', '0\r\n123456789\r\n'),
	(1675, 4, '2342432354632564\r\n235435224355432\r\n4524354325234\r\n23452344352\r\n234545445\r\n2345324\r\n23455\r\n2344\r\n856\r\n98\r\n0', '0\r\n98\r\n856\r\n2344\r\n23455\r\n2345324\r\n234545445\r\n23452344352\r\n4524354325234\r\n235435224355432\r\n2342432354632564\r\n'),
	(1676, 0, '4\r\n17 91 18 23\r\n', '17 23\r\n'),
	(1676, 1, '5\r\n156 284 -854 -179 -631', '156 -631\r\n'),
	(1676, 2, '10\r\n684 563 -408 530 -491 -670 -961 677 -135 -634', '684 -634\r\n'),
	(1676, 3, '20\r\n386 84 -929 964 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 -975 -726 767', '386 767\r\n'),
	(1676, 4, '40\r\n-122 -478 515 -835 742 620 -26 606 768 -675 -366 -154 -545 -601 811 -23 -468 244 557 88 -844 735 950 -93 35 -934 171 975 -117 541 689 -987 403 98 487 -137 568 906 -779 -87', '-122 -87\r\n'),
	(1676, 5, '80\r\n503 392 780 870 279 -514 163 993 -195 669 -565 396 -532 185 611 143 -429 -392 129 676 -551 -1 -277 -773 -365 -380 443 356 -89 -53 409 -375 23 -357 585 -237 954 -920 627 -452 -97 177 170 214 105 -707 544 -783 487 -656 -708 -41 -223 -455 -536 -497 -331 553 234 -341 43 806 81 857 -740 809 -628 825 600 -153 188 -509 -19 -420 -228 271 828 508 122 -659', '503 -659\r\n'),
	(1677, 0, '4\r\n0 0 5 10', '1,1,6,11.\r\n'),
	(1677, 1, '5\r\n156 284 -854 -179 -631', '157,285,-853,-178,-630.\r\n'),
	(1677, 2, '10\r\n684 563 -408 530 -491 -670 -961 677 -135 -634', '685,564,-407,531,-490,-669,-960,678,-134,-633.\r\n'),
	(1677, 3, '20\r\n386 84 -929 964 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 -975 -726 767', '387,85,-928,965,-465,-522,0,550,-804,915,334,619,-607,-383,-353,-31,-358,-974,-725,768.\r\n'),
	(1677, 4, '40\r\n-122 -478 515 -835 742 620 -26 606 768 -675 -366 -154 -545 -601 811 -23 -468 244 557 88 -844 735 950 -93 35 -934 171 975 -117 541 689 -987 403 98 487 -137 568 906 -779 -87', '-121,-477,516,-834,743,621,-25,607,769,-674,-365,-153,-544,-600,812,-22,-467,245,558,89,-843,736,951,-92,36,-933,172,976,-116,542,690,-986,404,99,488,-136,569,907,-778,-86.\r\n'),
	(1677, 5, '80\r\n503 392 780 870 279 -514 163 993 -195 669 -565 396 -532 185 611 143 -429 -392 129 676 -551 -1 -277 -773 -365 -380 443 356 -89 -53 409 -375 23 -357 585 -237 954 -920 627 -452 -97 177 170 214 105 -707 544 -783 487 -656 -708 -41 -223 -455 -536 -497 -331 553 234 -341 43 806 81 857 -740 809 -628 825 600 -153 188 -509 -19 -420 -228 271 828 508 122 -659', '504,393,781,871,280,-513,164,994,-194,670,-564,397,-531,186,612,144,-428,-391,130,677,-550,0,-276,-772,-364,-379,444,357,-88,-52,410,-374,24,-356,586,-236,955,-919,628,-451,-96,178,171,215,106,-706,545,-782,488,-655,-707,-40,-222,-454,-535,-496,-330,554,235,-340,44,807,82,858,-739,810,-627,826,601,-152,189,-508,-18,-419,-227,272,829,509,123,-658.\r\n'),
	(1678, 0, '4\r\n3 8 6 1\r\n', '9 16 36 2\r\n'),
	(1678, 1, '5\r\n156 284 -854 -179 -631', '24336 568 729316 -358 398161\r\n'),
	(1678, 2, '10\r\n684 563 -408 530 -491 -670 -961 677 -135 -634', '467856 1126 166464 1060 241081 -1340 923521 1354 18225 -1268\r\n'),
	(1678, 3, '20\r\n386 84 -929 964 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 -975 -726 767', '148996 168 863041 1928 217156 -1046 1 1098 648025 1828 110889 1236 369664 -768 125316 -64 128881 -1950 527076 1534\r\n'),
	(1678, 4, '40\r\n-122 -478 515 -835 742 620 -26 606 768 -675 -366 -154 -545 -601 811 -23 -468 244 557 88 -844 735 950 -93 35 -934 171 975 -117 541 689 -987 403 98 487 -137 568 906 -779 -87', '14884 -956 265225 -1670 550564 1240 676 1212 589824 -1350 133956 -308 297025 -1202 657721 -46 219024 488 310249 176 712336 1470 902500 -186 1225 -1868 29241 1950 13689 1082 474721 -1974 162409 196 237169 -274 322624 1812 606841 -174\r\n'),
	(1678, 5, '80\r\n503 392 780 870 279 -514 163 993 -195 669 -565 396 -532 185 611 143 -429 -392 129 676 -551 -1 -277 -773 -365 -380 443 356 -89 -53 409 -375 23 -357 585 -237 954 -920 627 -452 -97 177 170 214 105 -707 544 -783 487 -656 -708 -41 -223 -455 -536 -497 -331 553 234 -341 43 806 81 857 -740 809 -628 825 600 -153 188 -509 -19 -420 -228 271 828 508 122 -659', '253009 784 608400 1740 77841 -1028 26569 1986 38025 1338 319225 792 283024 370 373321 286 184041 -784 16641 1352 303601 -2 76729 -1546 133225 -760 196249 712 7921 -106 167281 -750 529 -714 342225 -474 910116 -1840 393129 -904 9409 354 28900 428 11025 -1414 295936 -1566 237169 -1312 501264 -82 49729 -910 287296 -994 109561 1106 54756 -682 1849 1612 6561 1714 547600 1618 394384 1650 360000 -306 35344 -1018 361 -840 51984 542 685584 1016 14884 -1318\r\n'),
	(1679, 0, '5\r\n3 5 0 4 9', '0 9\r\n'),
	(1679, 1, '5\r\n156 284 -854 -179 -631', '-854 284\r\n'),
	(1679, 2, '10\r\n684 563 -408 530 -491 -670 -961 677 -135 -634', '-961 684\r\n'),
	(1679, 3, '20\r\n386 84 -929 964 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 -975 -726 767', '-975 964\r\n'),
	(1679, 4, '40\r\n-122 -478 515 -835 742 620 -26 606 768 -675 -366 -154 -545 -601 811 -23 -468 244 557 88 -844 735 950 -93 35 -934 171 975 -117 541 689 -987 403 98 487 -137 568 906 -779 -87', '-987 975\r\n'),
	(1679, 5, '80\r\n503 392 780 870 279 -514 163 993 -195 669 -565 396 -532 185 611 143 -429 -392 129 676 -551 -1 -277 -773 -365 -380 443 356 -89 -53 409 -375 23 -357 585 -237 954 -920 627 -452 -97 177 170 214 105 -707 544 -783 487 -656 -708 -41 -223 -455 -536 -497 -331 553 234 -341 43 806 81 857 -740 809 -628 825 600 -153 188 -509 -19 -420 -228 271 828 508 122 -659', '-920 993\r\n'),
	(1680, 0, '5\r\n4 1 3 5 2', '4 5 3 1 2\r\n'),
	(1680, 1, '5\r\n156 284 -854 -179 -631', '156 -854 284 -179 -631\r\n'),
	(1680, 2, '10\r\n684 563 -408 530 -491 -670 -961 677 -135 -634', '-961 563 -408 530 -491 -670 684 677 -135 -634\r\n'),
	(1680, 3, '20\r\n386 84 -929 964 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 -975 -726 767', '386 84 -929 -975 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 964 -726 767\r\n'),
	(1680, 4, '40\r\n-122 -478 515 -835 742 620 -26 606 768 -675 -366 -154 -545 -601 811 -23 -468 244 557 88 -844 735 950 -93 35 -934 171 975 -117 541 689 -987 403 98 487 -137 568 906 -779 -87', '-122 -478 515 -835 742 620 -26 606 768 -675 -366 -154 -545 -601 811 -23 -468 244 557 88 -844 735 950 -93 35 -934 171 -987 -117 541 689 975 403 98 487 -137 568 906 -779 -87\r\n'),
	(1680, 5, '80\r\n503 392 780 870 279 -514 163 993 -195 669 -565 396 -532 185 611 143 -429 -392 129 676 -551 -1 -277 -773 -365 -380 443 356 -89 -53 409 -375 23 -357 585 -237 954 -920 627 -452 -97 177 170 214 105 -707 544 -783 487 -656 -708 -41 -223 -455 -536 -497 -331 553 234 -341 43 806 81 857 -740 809 -628 825 600 -153 188 -509 -19 -420 -228 271 828 508 122 -659', '503 392 780 870 279 -514 163 -920 -195 669 -565 396 -532 185 611 143 -429 -392 129 676 -551 -1 -277 -773 -365 -380 443 356 -89 -53 409 -375 23 -357 585 -237 954 993 627 -452 -97 177 170 214 105 -707 544 -783 487 -656 -708 -41 -223 -455 -536 -497 -331 553 234 -341 43 806 81 857 -740 809 -628 825 600 -153 188 -509 -19 -420 -228 271 828 508 122 -659\r\n'),
	(1681, 0, '3', '1\r\n1\r\n1\r\n'),
	(1681, 1, '5', '1\r\n1\r\n1\r\n1\r\n1\r\n'),
	(1681, 2, '16', '1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n'),
	(1681, 3, '25', '1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n'),
	(1681, 4, '40', '1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n'),
	(1681, 5, '81', '1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n'),
	(1681, 6, '100', '1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n'),
	(1682, 0, '5\r\n2 0 5 9 0', '2\r\n'),
	(1682, 1, '5\r\n0 284 -854 0 0', '3\r\n'),
	(1682, 2, '10\r\n0 563 0 530 -491 0 -961 677 -0 -634', '4\r\n'),
	(1682, 3, '20\r\n386 84 -929 964 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 -975 -726 767', '0\r\n'),
	(1682, 4, '40\r\n-122 0 515 -835 0 0 0 606 768 -675 -366 -154 -545 0 811 -23 -468 0 557 88 -844 735 950 -93 35 -934 171 975 -117 541 689 -987 403 98 487 -137 568 906 -779 -87', '6\r\n'),
	(1682, 5, '80\r\n0 392 780 870 0 0 163 993 -195 669 -565 396 -532 185 611 143 -429 -392 129 676 -551 -1 -277 -773 -365 -380 443 356 -89 -53 409 -375 23 -357 585 -237 954 -920 627 -452 -97 177 170 214 105 -707 544 -783 487 -656 -708 -41 -223 -455 -536 -497 -331 553 234 -341 43 806 81 857 -740 809 -628 825 600 -153 188 -509 -19 -420 -228 271 828 508 122 0', '4\r\n'),
	(1683, 0, '3\r\n9 5 7', '7 5 9\r\n'),
	(1683, 1, '5\r\n156 284 -854 -179 -631', '-631 -179 -854 284 156\r\n'),
	(1683, 2, '10\r\n684 563 -408 530 -491 -670 -961 677 -135 -634', '-634 -135 677 -961 -670 -491 530 -408 563 684\r\n'),
	(1683, 3, '20\r\n386 84 -929 964 -466 -523 -1 549 -805 914 333 618 -608 -384 -354 -32 -359 -975 -726 767', '767 -726 -975 -359 -32 -354 -384 -608 618 333 914 -805 549 -1 -523 -466 964 -929 84 386\r\n'),
	(1683, 4, '40\r\n-122 -478 515 -835 742 620 -26 606 768 -675 -366 -154 -545 -601 811 -23 -468 244 557 88 -844 735 950 -93 35 -934 171 975 -117 541 689 -987 403 98 487 -137 568 906 -779 -87', '-87 -779 906 568 -137 487 98 403 -987 689 541 -117 975 171 -934 35 -93 950 735 -844 88 557 244 -468 -23 811 -601 -545 -154 -366 -675 768 606 -26 620 742 -835 515 -478 -122\r\n'),
	(1683, 5, '80\r\n503 392 780 870 279 -514 163 993 -195 669 -565 396 -532 185 611 143 -429 -392 129 676 -551 -1 -277 -773 -365 -380 443 356 -89 -53 409 -375 23 -357 585 -237 954 -920 627 -452 -97 177 170 214 105 -707 544 -783 487 -656 -708 -41 -223 -455 -536 -497 -331 553 234 -341 43 806 81 857 -740 809 -628 825 600 -153 188 -509 -19 -420 -228 271 828 508 122 -659', '-659 122 508 828 271 -228 -420 -19 -509 188 -153 600 825 -628 809 -740 857 81 806 43 -341 234 553 -331 -497 -536 -455 -223 -41 -708 -656 487 -783 544 -707 105 214 170 177 -97 -452 627 -920 954 -237 585 -357 23 -375 409 -53 -89 356 443 -380 -365 -773 -277 -1 -551 676 129 -392 -429 143 611 185 -532 396 -565 669 -195 993 163 -514 279 870 780 392 503\r\n'),
	(1684, 0, '5\r\n1 3 4 5 6', '1 6\r\n'),
	(1684, 1, '5\r\n152 278 654 321 893\r\n', '152 893\r\n'),
	(1684, 2, '5\r\n-63542 -67852 -3457 -34596 -63425\r\n', '-67852 -3457\r\n'),
	(1684, 3, '5\r\n0 0 0 0 0\r\n', '0 0\r\n'),
	(1684, 4, '5\r\n-99999999 -99999999 -99999999 -99999999 -99999999\r\n', '-99999999 -99999999\r\n'),
	(1684, 5, '5\r\n123456789 987654321 -123456789 -987654321 0\r\n', '-987654321 987654321\r\n'),
	(1685, 0, '1\r\n1\r\n1\r\n1\r\n1\r\n', '5\r\n'),
	(1685, 1, '1\r\n2\r\n3\r\n4\r\n5\r\n', '1119\r\n'),
	(1685, 2, '8\r\n7\r\n6\r\n5\r\n4\r\n\r\n', '2288738\r\n'),
	(1685, 3, '3\r\n4\r\n5\r\n6\r\n8\r\n\r\n', '1696858\r\n'),
	(1685, 4, '10\r\n5\r\n8\r\n3\r\n6\r\n', '60958042\r\n'),
	(1685, 5, '123456789\r\n1\r\n1\r\n87654321\r\n1\r\n\r\n', '211111113\r\n'),
	(1686, 0, '1 2 3 4 5', '3\r\n'),
	(1686, 1, '101 102 103 104 105\r\n', '10\r\n'),
	(1686, 2, '25 327 689 13 24\r\n', '1\r\n'),
	(1686, 3, '1 10 100 1000 10000\r\n', '0\r\n'),
	(1686, 4, '88888 65478 36895 98752 21454\r\n', '5\r\n'),
	(1686, 5, '1 500 501 502 503\r\n', '4\r\n'),
	(1686, 6, '400 405 409 1 2\r\n', '1\r\n'),
	(1686, 7, '400 405 409 50 52\r\n', '7\r\n'),
	(1687, 0, '0 0\r\n16 0\r\n16 12\r\n8 15\r\n0 12\r\n', '90.00\r\n'),
	(1687, 1, '5 5\r\n5 5\r\n5 5\r\n5 5\r\n5 5', '0.00\r\n'),
	(1687, 2, '2 3\r\n9 1\r\n13 7\r\n8 12\r\n4 5\r\n\r\n', '49.19\r\n'),
	(1687, 3, '-12.5 -15.4\r\n0.2 -8.7\r\n12.9 4.8\r\n0.2 8.3\r\n-4.5 16.9\r\n', '123.56\r\n'),
	(1688, 0, '2', '9.0000\r\n'),
	(1688, 1, '1', '81.0000\r\n'),
	(1688, 2, '3', '3.0000\r\n'),
	(1688, 3, '5', '1.3161\r\n'),
	(1688, 4, '7', '1.0711\r\n'),
	(1688, 5, '10', '1.0086\r\n'),
	(1689, 0, '1', '0.50875\r\n0.49601\r\n0.48095\r\n0.46438\r\n0.44725\r\n0.43064\r\n0.41575\r\n0.40384\r\n0.39622\r\n0.39412\r\n0.39872\r\n'),
	(1689, 1, '0', '0.71394\r\n0.77356\r\n0.83322\r\n0.89169\r\n0.94771\r\n1.00000\r\n0.94771\r\n0.89169\r\n0.83322\r\n0.77356\r\n0.71394\r\n'),
	(1689, 2, '10', '0.15981\r\n0.15898\r\n0.15665\r\n0.15294\r\n0.14799\r\n0.14200\r\n0.13523\r\n0.12797\r\n0.12052\r\n0.11323\r\n0.10643\r\n'),
	(1689, 3, '2.4', '0.22636\r\n0.24495\r\n0.26725\r\n0.29277\r\n0.32088\r\n0.35085\r\n0.38181\r\n0.41279\r\n0.44277\r\n0.47070\r\n0.49553\r\n'),
	(1690, 0, '-', '-------------------------\r\n|  t  |   x    |   y    |\r\n-------------------------\r\n| 0.0 |  3.000 |  1.000 |\r\n| 0.1 |  3.281 |  0.980 |\r\n| 0.2 |  3.505 |  0.921 |\r\n| 0.3 |  3.649 |  0.825 |\r\n| 0.4 |  3.695 |  0.697 |\r\n| 0.5 |  3.630 |  0.540 |\r\n| 0.6 |  3.450 |  0.362 |\r\n| 0.7 |  3.158 |  0.170 |\r\n| 0.8 |  2.766 | -0.029 |\r\n| 0.9 |  2.292 | -0.227 |\r\n| 1.0 |  1.762 | -0.416 |\r\n| 1.1 |  1.203 | -0.589 |\r\n| 1.2 |  0.645 | -0.737 |\r\n| 1.3 |  0.115 | -0.857 |\r\n| 1.4 | -0.362 | -0.942 |\r\n| 1.5 | -0.765 | -0.990 |\r\n| 1.6 | -1.084 | -0.998 |\r\n| 1.7 | -1.312 | -0.967 |\r\n| 1.8 | -1.454 | -0.897 |\r\n| 1.9 | -1.521 | -0.791 |\r\n| 2.0 | -1.528 | -0.654 |\r\n| 2.1 | -1.498 | -0.490 |\r\n| 2.2 | -1.454 | -0.307 |\r\n| 2.3 | -1.420 | -0.112 |\r\n| 2.4 | -1.419 |  0.087 |\r\n| 2.5 | -1.465 |  0.284 |\r\n| 2.6 | -1.572 |  0.469 |\r\n| 2.7 | -1.742 |  0.635 |\r\n| 2.8 | -1.972 |  0.776 |\r\n| 2.9 | -2.250 |  0.886 |\r\n| 3.0 | -2.558 |  0.960 |\r\n| 3.1 | -2.873 |  0.997 |\r\n| 3.2 | -3.169 |  0.993 |\r\n| 3.3 | -3.420 |  0.950 |\r\n| 3.4 | -3.600 |  0.869 |\r\n| 3.5 | -3.689 |  0.754 |\r\n| 3.6 | -3.671 |  0.608 |\r\n| 3.7 | -3.539 |  0.439 |\r\n| 3.8 | -3.292 |  0.251 |\r\n| 3.9 | -2.940 |  0.054 |\r\n| 4.0 | -2.498 | -0.146 |\r\n| 4.1 | -1.988 | -0.339 |\r\n| 4.2 | -1.437 | -0.519 |\r\n| 4.3 | -0.875 | -0.679 |\r\n| 4.4 | -0.330 | -0.811 |\r\n| 4.5 |  0.171 | -0.911 |\r\n| 4.6 |  0.607 | -0.975 |\r\n| 4.7 |  0.962 | -1.000 |\r\n| 4.8 |  1.228 | -0.985 |\r\n| 4.9 |  1.405 | -0.930 |\r\n| 5.0 |  1.501 | -0.839 |\r\n| 5.1 |  1.531 | -0.714 |\r\n| 5.2 |  1.513 | -0.561 |\r\n| 5.3 |  1.472 | -0.385 |\r\n| 5.4 |  1.432 | -0.194 |\r\n| 5.5 |  1.414 |  0.004 |\r\n| 5.6 |  1.439 |  0.203 |\r\n| 5.7 |  1.520 |  0.393 |\r\n| 5.8 |  1.664 |  0.568 |\r\n| 5.9 |  1.870 |  0.720 |\r\n| 6.0 |  2.130 |  0.844 |\r\n| 6.1 |  2.427 |  0.934 |\r\n| 6.2 |  2.743 |  0.986 |\r\n| 6.3 |  3.050 |  0.999 |\r\n| 6.4 |  3.323 |  0.973 |\r\n| 6.5 |  3.535 |  0.907 |\r\n| 6.6 |  3.664 |  0.806 |\r\n| 6.7 |  3.692 |  0.672 |\r\n| 6.8 |  3.608 |  0.512 |\r\n| 6.9 |  3.408 |  0.331 |\r\n| 7.0 |  3.098 |  0.137 |\r\n-------------------------\r\n'),
	(1691, 0, '1 -5 6', '2.000 3.000\r\n'),
	(1691, 1, '-4 25 5', '-0.194 6.444\r\n'),
	(1691, 2, '-2 -4 0', '-2.000 0.000\r\n'),
	(1691, 3, '1 2 4', 'NO\r\n'),
	(1691, 4, '1 -2 1', '1.000\r\n'),
	(1691, 5, '800 -357 98', 'NO\r\n'),
	(1692, 0, '1.2', '4.5239\r\n'),
	(1692, 1, '20', '1256.6371\r\n'),
	(1692, 2, '99.9', '31353.1261\r\n'),
	(1692, 3, '100.001', '31416.5549\r\n'),
	(1692, 4, '1', '3.1416\r\n'),
	(1693, 0, '2', '1.73205\r\n'),
	(1693, 1, '1', '1.00000\r\n'),
	(1693, 2, '3', '2.17533\r\n'),
	(1693, 3, '4', '2.48502\r\n'),
	(1693, 4, '5', '2.73588\r\n'),
	(1693, 5, '10', '3.67598\r\n'),
	(1693, 6, '25', '5.51488\r\n'),
	(1693, 7, '50', '7.58371\r\n'),
	(1693, 8, '100', '10.50999\r\n'),
	(1694, 0, '2 3\r\n6 8\r\n9 -4', '31.5000\r\n'),
	(1694, 1, '1 1\r\n3 1\r\n1 2', '1.0000\r\n'),
	(1695, 0, '-', '7\r\n14\r\n21\r\n28\r\n35\r\n42\r\n49\r\n56\r\n63\r\n70\r\n77\r\n84\r\n91\r\n98\r\n'),
	(1696, 0, '256', '128\r\n'),
	(1696, 1, '7', '1\r\n'),
	(1696, 2, '27', '9\r\n'),
	(1696, 3, '23', '1\r\n'),
	(1696, 4, '100', '50\r\n'),
	(1696, 5, '37', '1\r\n'),
	(1696, 6, '4096', '2048\r\n'),
	(1696, 7, '10000', '5000\r\n'),
	(1697, 0, '7.8\r\n4.0', '16.4365\r\n'),
	(1697, 1, '3\r\n4\r\n', '12.3679\r\n'),
	(1697, 2, '5\r\n4\r\n', '13.8529\r\n'),
	(1697, 3, '10\r\n10\r\n', '45.5636\r\n'),
	(1706, 0, 'ABCDEF\r\n', '8\r\n'),
	(1706, 1, 'import java.io.IOException;\r\n\r\npublic class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws IOException \r\n	{\r\n		int count = 0;\r\n		while (true)\r\n		{\r\n			int x = System.in.read();\r\n			if (x == -1) break; // CTRL Z\r\n			count ++;\r\n		}\r\n		System.out.println(count);\r\n	}\r\n}	', '287\r\n'),
	(1706, 2, 'a;wleui fa;osiuf ;ozseuif a;seodfui se7ior a[worusfdv\r\nzfsvig as]\r\npdfuasoidfuse\r\n[fuo sdip\r\nfh\r\nsdf jas\r\ndfhi as\r\ndfoadfhasdlfh\r\nasf\r\nawsf asdfkh\r\n\r\nsadf asdf\r\n', '161\r\n'),
	(1706, 3, 'Зима!\r\nКрестьянин торжествуя\r\nна дровнях обновляет путь...', '58\r\n'),
	(1706, 4, '123456789012345678901234567890', '30\r\n'),
	(1706, 5, 'Потоковое мультимедиа\r\n[править | править вики-текст]Материал из Википедии — свободной энциклопедии\r\n(перенаправлено с «Stream»)\r\nТекущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 6 января 2015; проверки требуют 12 правок.\r\nПотоковое мультимедиа (от. англ. streaming media) — это мультимедиа, которое непрерывно получается пользователем от провайдера потокового вещания. Это понятие применимо как к информации, распространяемой через телекоммуникации, так и к информации, которая изначально распространялась посредством потокового вещания (например, радио, телевидение) или непотоковой (например, книги, видеокассеты, аудио CD).\r\nСодержание  [скрыть] \r\n1	История\r\n2	Потоковое вещание и хранение информации\r\n3	Протоколы потокового вещания\r\n4	См. также\r\nИстория[править | править вики-текст]\r\nПервые попытки отображения мультимедийной информации на компьютерах начались в середине XX века. Однако, прогресс в этой сфере был очень малым, вследствие высокой стоимости и ограниченных возможностей компьютеров тех времён.\r\nС конца 1980-х и до 1990-х компьютеры, доступные потребителям, уже были способны отображать различные виды информации. Основными техническими проблемами потокового вещания были:\r\nналичие достаточно производительного CPU и шины для передачи мультимедиа необходимого битрейта\r\nТем не менее, компьютерные сети оставались ограниченными, а потоковое мультимедиа уступало традиционному (CD-ROM).\r\nВ период с 1990 до 2000 пользователи интернета получили:\r\nвысокую пропускную способность сетей, в частности, на последней миле\r\nвозросло количество абонентов сетей, особенно Интернета\r\nстали использоваться стандартизованные протоколы и форматы, такие как TCP/IP, HTTP и HTML\r\nпоявилась коммерция в Интернете\r\nЭти достижения в области сетей в совокупности с высокопроизводительными домашними компьютерами и современными операционными системами сделали потоковую мультимедийную информацию доступной широкому кругу простых пользователей. Автономные приёмники интернет-радио предлагали пользователям возможность прослушивания потокового звука без наличия компьютера.\r\nВ основном, мультимедиа информация занимает большие объёмы, так что затраты на хранение и передачу подобной информации всегда велики; поэтому, в большинстве случаев, передаваемая в поток информация сжимается при передаче в сеть вещания.\r\nМультимедиа потоки бывают двух видов: по запросу или живыми. Потоки информации, вызываемой по запросу пользователя, хранятся на серверах продолжительный период времени. Живые потоки доступны короткий период времени, например, при передаче видео со спортивных соревнований.\r\nПотоковое вещание и хранение информации[править | править вики-текст]\r\n\r\nРеализация сервера потокового вещания по принципу 1 клиент — 1 соединение\r\nРазмер, необходимый для хранения потоковой мультимедиа информации (в большинстве файловых систем выражается в мегабайтах, гигабайтах, терабайтах и т. д.) вычисляется в зависимости от скорости передаваемой информации и продолжительности информации по следующей формуле (для одного пользователя и файла):\r\nразмер хранилища (в мегабайтах) = продолжительность (в секундах) * битрейт (в кбит/с) / (8 * 1024)\r\n(если считать, что 1 мегабайт = 8 * 1024 кбитов)\r\nПример из жизни:\r\nОдин час видео, закодированного со скоростью 300 кбит/с (типичное видео по состоянию на 2005 год, имеющее размер 320×240 пикселов), будет занимать:\r\n(3600 с * 300 кбит/с) / (8*1024) = порядка 128 Мб места на диске\r\nЕсли файл, хранимый на сервере с режимом передачи по запросу, будут просматривать 1000 людей одновременно по протоколу Unicast (1 клиент — 1 соединение), то сервер должен иметь следующую пропускную способность:\r\n300 кбит/с * 1000 = 300.000 кбит/с = 300 Мбит/с сетевого интерфейса\r\nЭто эквивалент порядка 135 ГБ информации в час. Разумеется, при использовании протокола Multicast нагрузка на сервер намного ниже, так как для передачи информации всем клиентам используется единственный поток. Следовательно, такой поток будет занимать всего 300 кбит/с сетевого интерфейса сервера. Более подробная информация об этих протоколах даётся ниже.\r\nЕсли же видео 1080p 60p 3.472222 МБ/с * 8 = 27.777 мбит/сек * 1000 = 27.777 гбит/сек\r\n2160p 120p 27.777 МБ/сек * 8 =222.222 мбит/сек * 1000 = 222.222 гбит/сек\r\nПротоколы потокового вещания[править | править вики-текст]\r\nРазработка сетевых протоколов потокового вещания вызывает следующие проблемы:\r\nДатаграмные протоколы, такие как User Datagram Protocol (UDP), отправляют поток медиаинформации как поток отдельных маленьких пакетов. Он прост и эффективен; в то же время, в спецификации протокола нет гарантии доставки данных получателю. Это очень сильно затрудняет поиск и исправление получаемых данных принимающим информацию приложением. При потере данных поток может быть отключен.\r\nПротоколы RTSP, RTP и RTCP специально разрабатывались для передачи мультимедийной информации по сети. Последние два построены на основе UDP.\r\nНадежные протоколы, такие как TCP, гарантируют корректность получаемых данных клиентов потокового вещания. Однако при большом количестве ошибок при соединении/подтверждении получаемой информации передаваемая информация может стать неактуальной. Это также может вызвать значительные задержки при передаче информации на время, затраченное на пересылку поврежденной информации. Одним из решений данной проблемы является буферизация информации на стороне клиента.\r\nПротоколы Unicast отправляют отдельную копию данных каждому клиенту. Unicast подходит для большинства пользователей сети Интернет, но сильно затрудняет масштабирование сервера для бо́льшего количества клиентов.\r\n\r\nПри широковещательной передаче одна копия данных передается всем клиентам сервера\r\nПротоколы Multicast разработаны для снижения нагрузки с серверов на подключения/ширину канала при получении потокового мультимедиа большим количеством клиентов. Эти протоколы отсылают одну порцию данных целой группе клиентов. В зависимости от типа сетевой инфраструктуры, групповая передача данных может быть доступна, а может и не быть. Одним из потенциальных недостатков групповой передачи является отсутствие возможности реализовать функцию видео по запросу. Непрерывное вещание потоковой информации также делает невозможным управление воспроизведением пользователем. Однако, эта проблема может быть решена внедрением в сеть передачи данных кэширующих серверов и буферизирующего принимаемый поток программного обеспечения.\r\nMulticast позволяет передавать один поток информации группе клиентов по сети. Одной из проблем при реализации подобной схемы потокового вещания является корректная настройка маршрутизаторов для передачи широковещательных пакетов из одного сегмента сети в другой. Если организация, предоставляющая потоковое вещание, имеет контроль над сетью между сервером и клиентами (например, в образовательной, правительственной или корпоративной сети), то протоколы маршрутизации, такие как IGMP и PIM, могут быть использованы для доставки мультимедиа нескольким клиентам из различных сегментов LAN.\r\nПротоколы P2P могут использоваться при распространении предварительно записанной мультимедиа между компьютерами. Это снимает нагрузку с сервера, однако сеть передачи данных между сервером и одним из клиентов становится узким местом данного варианта реализации потокового вещания информации.\r\nСм. также[править | править вики-текст]\r\nIPTV\r\nСписок систем потокового мультимедиа\r\nЦифровое телевидение\r\nMPEG-DASH\r\n\r\nQuestion book-4.svg\r\nВ этой статье не хватает ссылок на источники информации.\r\nИнформация должна быть проверяема, иначе она может быть поставлена под сомнение и удалена.\r\nВы можете отредактировать эту статью, добавив ссылки на авторитетные источники.\r\nЭта отметка установлена 14 мая 2011 года.\r\nКатегория: Мультимедиа\r\nНавигация\r\nВы не представились системеОбсуждениеВкладСоздать учётную записьВойтиСтатьяОбсуждениеЧитатьТекущая версияПравитьПравить вики-текстИсторияПоиск\r\n\r\nИскать в Википедии\r\nПерейти\r\nЗаглавная страница\r\nРубрикация\r\nУказатель А — Я\r\nИзбранные статьи\r\nСлучайная статья\r\nТекущие события\r\nУчастие\r\nСообщить об ошибке\r\nПортал сообщества\r\nФорум\r\nСвежие правки\r\nНовые страницы\r\nСправка\r\nПожертвовать\r\nИнструменты\r\nСсылки сюда\r\nСвязанные правки\r\nСпецстраницы\r\nПостоянная ссылка\r\nСведения о странице\r\nЦитировать страницу\r\nПечать/экспорт\r\nСоздать книгу\r\nСкачать как PDF\r\nВерсия для печати\r\nВ других проектах\r\nВикисклад\r\nВикиданные\r\nНа других языках\r\nالعربية\r\nDeutsch\r\nEnglish\r\nEspañol\r\nFrançais\r\nहिन्दी\r\n日本語\r\nPortuguês\r\n中文\r\nЕщё 32\r\nПравить ссылки\r\nПоследнее изменение этой страницы: 16:25, 8 ноября 2016.\r\nТекст доступен по лицензии Creative Commons Attribution-ShareAlike; в отдельных случаях могут действовать дополнительные условия. Подробнее см. Условия использования.\r\nWikipedia® — зарегистрированный товарный знак некоммерческой организации Wikimedia Foundation, Inc.\r\nСвяжитесь с нами\r\nПолитика конфиденциальностиОписание ВикипедииОтказ от ответственностиРазработчикиСоглашение о cookieМобильная версияWikimedia Foundation Powered by MediaWiki\r\n', '9005\r\n'),
	(1707, 0, 'ABC', '66.000\r\n'),
	(1707, 1, 'ABCD', '66.500\r\n'),
	(1707, 2, '0123456789012345678901234567890123456789', '52.500\r\n'),
	(1707, 3, 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n		int count = 0;\r\n		int sum = 0;\r\n		while (true)\r\n		{\r\n			int x = System.in.read();\r\n			if (x == -1) break; // CTRL Z\r\n			count ++;\r\n			sum += x;\r\n		}\r\n		if (count == 0)\r\n		    count = 1;\r\n		System.out.println(sum / count);\r\n	}\r\n}', '69.055\r\n'),
	(1707, 4, '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111z', '49.122\r\n'),
	(1707, 5, 'Потоковое мультимедиа\r\n[править | править вики-текст]Материал из Википедии — свободной энциклопедии\r\n(перенаправлено с «Stream»)\r\nТекущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 6 января 2015; проверки требуют 12 правок.\r\nПотоковое мультимедиа (от. англ. streaming media) — это мультимедиа, которое непрерывно получается пользователем от провайдера потокового вещания. Это понятие применимо как к информации, распространяемой через телекоммуникации, так и к информации, которая изначально распространялась посредством потокового вещания (например, радио, телевидение) или непотоковой (например, книги, видеокассеты, аудио CD).\r\nСодержание  [скрыть] \r\n1	История\r\n2	Потоковое вещание и хранение информации\r\n3	Протоколы потокового вещания\r\n4	См. также\r\nИстория[править | править вики-текст]\r\nПервые попытки отображения мультимедийной информации на компьютерах начались в середине XX века. Однако, прогресс в этой сфере был очень малым, вследствие высокой стоимости и ограниченных возможностей компьютеров тех времён.\r\nС конца 1980-х и до 1990-х компьютеры, доступные потребителям, уже были способны отображать различные виды информации. Основными техническими проблемами потокового вещания были:\r\nналичие достаточно производительного CPU и шины для передачи мультимедиа необходимого битрейта\r\nТем не менее, компьютерные сети оставались ограниченными, а потоковое мультимедиа уступало традиционному (CD-ROM).\r\nВ период с 1990 до 2000 пользователи интернета получили:\r\nвысокую пропускную способность сетей, в частности, на последней миле\r\nвозросло количество абонентов сетей, особенно Интернета\r\nстали использоваться стандартизованные протоколы и форматы, такие как TCP/IP, HTTP и HTML\r\nпоявилась коммерция в Интернете\r\nЭти достижения в области сетей в совокупности с высокопроизводительными домашними компьютерами и современными операционными системами сделали потоковую мультимедийную информацию доступной широкому кругу простых пользователей. Автономные приёмники интернет-радио предлагали пользователям возможность прослушивания потокового звука без наличия компьютера.\r\nВ основном, мультимедиа информация занимает большие объёмы, так что затраты на хранение и передачу подобной информации всегда велики; поэтому, в большинстве случаев, передаваемая в поток информация сжимается при передаче в сеть вещания.\r\nМультимедиа потоки бывают двух видов: по запросу или живыми. Потоки информации, вызываемой по запросу пользователя, хранятся на серверах продолжительный период времени. Живые потоки доступны короткий период времени, например, при передаче видео со спортивных соревнований.\r\nПотоковое вещание и хранение информации[править | править вики-текст]\r\n\r\nРеализация сервера потокового вещания по принципу 1 клиент — 1 соединение\r\nРазмер, необходимый для хранения потоковой мультимедиа информации (в большинстве файловых систем выражается в мегабайтах, гигабайтах, терабайтах и т. д.) вычисляется в зависимости от скорости передаваемой информации и продолжительности информации по следующей формуле (для одного пользователя и файла):\r\nразмер хранилища (в мегабайтах) = продолжительность (в секундах) * битрейт (в кбит/с) / (8 * 1024)\r\n(если считать, что 1 мегабайт = 8 * 1024 кбитов)\r\nПример из жизни:\r\nОдин час видео, закодированного со скоростью 300 кбит/с (типичное видео по состоянию на 2005 год, имеющее размер 320×240 пикселов), будет занимать:\r\n(3600 с * 300 кбит/с) / (8*1024) = порядка 128 Мб места на диске\r\nЕсли файл, хранимый на сервере с режимом передачи по запросу, будут просматривать 1000 людей одновременно по протоколу Unicast (1 клиент — 1 соединение), то сервер должен иметь следующую пропускную способность:\r\n300 кбит/с * 1000 = 300.000 кбит/с = 300 Мбит/с сетевого интерфейса\r\nЭто эквивалент порядка 135 ГБ информации в час. Разумеется, при использовании протокола Multicast нагрузка на сервер намного ниже, так как для передачи информации всем клиентам используется единственный поток. Следовательно, такой поток будет занимать всего 300 кбит/с сетевого интерфейса сервера. Более подробная информация об этих протоколах даётся ниже.\r\nЕсли же видео 1080p 60p 3.472222 МБ/с * 8 = 27.777 мбит/сек * 1000 = 27.777 гбит/сек\r\n2160p 120p 27.777 МБ/сек * 8 =222.222 мбит/сек * 1000 = 222.222 гбит/сек\r\nПротоколы потокового вещания[править | править вики-текст]\r\nРазработка сетевых протоколов потокового вещания вызывает следующие проблемы:\r\nДатаграмные протоколы, такие как User Datagram Protocol (UDP), отправляют поток медиаинформации как поток отдельных маленьких пакетов. Он прост и эффективен; в то же время, в спецификации протокола нет гарантии доставки данных получателю. Это очень сильно затрудняет поиск и исправление получаемых данных принимающим информацию приложением. При потере данных поток может быть отключен.\r\nПротоколы RTSP, RTP и RTCP специально разрабатывались для передачи мультимедийной информации по сети. Последние два построены на основе UDP.\r\nНадежные протоколы, такие как TCP, гарантируют корректность получаемых данных клиентов потокового вещания. Однако при большом количестве ошибок при соединении/подтверждении получаемой информации передаваемая информация может стать неактуальной. Это также может вызвать значительные задержки при передаче информации на время, затраченное на пересылку поврежденной информации. Одним из решений данной проблемы является буферизация информации на стороне клиента.\r\nПротоколы Unicast отправляют отдельную копию данных каждому клиенту. Unicast подходит для большинства пользователей сети Интернет, но сильно затрудняет масштабирование сервера для бо́льшего количества клиентов.\r\n\r\nПри широковещательной передаче одна копия данных передается всем клиентам сервера\r\nПротоколы Multicast разработаны для снижения нагрузки с серверов на подключения/ширину канала при получении потокового мультимедиа большим количеством клиентов. Эти протоколы отсылают одну порцию данных целой группе клиентов. В зависимости от типа сетевой инфраструктуры, групповая передача данных может быть доступна, а может и не быть. Одним из потенциальных недостатков групповой передачи является отсутствие возможности реализовать функцию видео по запросу. Непрерывное вещание потоковой информации также делает невозможным управление воспроизведением пользователем. Однако, эта проблема может быть решена внедрением в сеть передачи данных кэширующих серверов и буферизирующего принимаемый поток программного обеспечения.\r\nMulticast позволяет передавать один поток информации группе клиентов по сети. Одной из проблем при реализации подобной схемы потокового вещания является корректная настройка маршрутизаторов для передачи широковещательных пакетов из одного сегмента сети в другой. Если организация, предоставляющая потоковое вещание, имеет контроль над сетью между сервером и клиентами (например, в образовательной, правительственной или корпоративной сети), то протоколы маршрутизации, такие как IGMP и PIM, могут быть использованы для доставки мультимедиа нескольким клиентам из различных сегментов LAN.\r\nПротоколы P2P могут использоваться при распространении предварительно записанной мультимедиа между компьютерами. Это снимает нагрузку с сервера, однако сеть передачи данных между сервером и одним из клиентов становится узким местом данного варианта реализации потокового вещания информации.\r\nСм. также[править | править вики-текст]\r\nIPTV\r\nСписок систем потокового мультимедиа\r\nЦифровое телевидение\r\nMPEG-DASH\r\n\r\nQuestion book-4.svg\r\nВ этой статье не хватает ссылок на источники информации.\r\nИнформация должна быть проверяема, иначе она может быть поставлена под сомнение и удалена.\r\nВы можете отредактировать эту статью, добавив ссылки на авторитетные источники.\r\nЭта отметка установлена 14 мая 2011 года.\r\nКатегория: Мультимедиа\r\nНавигация\r\nВы не представились системеОбсуждениеВкладСоздать учётную записьВойтиСтатьяОбсуждениеЧитатьТекущая версияПравитьПравить вики-текстИсторияПоиск\r\n\r\nИскать в Википедии\r\nПерейти\r\nЗаглавная страница\r\nРубрикация\r\nУказатель А — Я\r\nИзбранные статьи\r\nСлучайная статья\r\nТекущие события\r\nУчастие\r\nСообщить об ошибке\r\nПортал сообщества\r\nФорум\r\nСвежие правки\r\nНовые страницы\r\nСправка\r\nПожертвовать\r\nИнструменты\r\nСсылки сюда\r\nСвязанные правки\r\nСпецстраницы\r\nПостоянная ссылка\r\nСведения о странице\r\nЦитировать страницу\r\nПечать/экспорт\r\nСоздать книгу\r\nСкачать как PDF\r\nВерсия для печати\r\nВ других проектах\r\nВикисклад\r\nВикиданные\r\nНа других языках\r\nالعربية\r\nDeutsch\r\nEnglish\r\nEspañol\r\nFrançais\r\nहिन्दी\r\n日本語\r\nPortuguês\r\n中文\r\nЕщё 32\r\nПравить ссылки\r\nПоследнее изменение этой страницы: 16:25, 8 ноября 2016.\r\nТекст доступен по лицензии Creative Commons Attribution-ShareAlike; в отдельных случаях могут действовать дополнительные условия. Подробнее см. Условия использования.\r\nWikipedia® — зарегистрированный товарный знак некоммерческой организации Wikimedia Foundation, Inc.\r\nСвяжитесь с нами\r\nПолитика конфиденциальностиОписание ВикипедииОтказ от ответственностиРазработчикиСоглашение о cookieМобильная версияWikimedia Foundation Powered by MediaWiki\r\n', '154.058\r\n'),
	(1708, 0, 'ABCD', '65 68\r\n'),
	(1708, 1, 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n		int count = 0;\r\n		int sum = 0;\r\n		while (true)\r\n		{\r\n			int x = System.in.read();\r\n			if (x == -1) break; // CTRL Z\r\n			count ++;\r\n			sum += x;\r\n		}\r\n		if (count == 0)\r\n		    count = 1;\r\n		System.out.println(sum / count);\r\n	}\r\n}', '9 125\r\n'),
	(1708, 2, '0123456789012345678901234567890123456789', '48 57\r\n'),
	(1708, 3, 'Потоковое мультимедиа\r\n[править | править вики-текст]Материал из Википедии — свободной энциклопедии\r\n(перенаправлено с «Stream»)\r\nТекущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 6 января 2015; проверки требуют 12 правок.\r\nПотоковое мультимедиа (от. англ. streaming media) — это мультимедиа, которое непрерывно получается пользователем от провайдера потокового вещания. Это понятие применимо как к информации, распространяемой через телекоммуникации, так и к информации, которая изначально распространялась посредством потокового вещания (например, радио, телевидение) или непотоковой (например, книги, видеокассеты, аудио CD).\r\nСодержание  [скрыть] \r\n1	История\r\n2	Потоковое вещание и хранение информации\r\n3	Протоколы потокового вещания\r\n4	См. также\r\nИстория[править | править вики-текст]\r\nПервые попытки отображения мультимедийной информации на компьютерах начались в середине XX века. Однако, прогресс в этой сфере был очень малым, вследствие высокой стоимости и ограниченных возможностей компьютеров тех времён.\r\nС конца 1980-х и до 1990-х компьютеры, доступные потребителям, уже были способны отображать различные виды информации. Основными техническими проблемами потокового вещания были:\r\nналичие достаточно производительного CPU и шины для передачи мультимедиа необходимого битрейта\r\nТем не менее, компьютерные сети оставались ограниченными, а потоковое мультимедиа уступало традиционному (CD-ROM).\r\nВ период с 1990 до 2000 пользователи интернета получили:\r\nвысокую пропускную способность сетей, в частности, на последней миле\r\nвозросло количество абонентов сетей, особенно Интернета\r\nстали использоваться стандартизованные протоколы и форматы, такие как TCP/IP, HTTP и HTML\r\nпоявилась коммерция в Интернете\r\nЭти достижения в области сетей в совокупности с высокопроизводительными домашними компьютерами и современными операционными системами сделали потоковую мультимедийную информацию доступной широкому кругу простых пользователей. Автономные приёмники интернет-радио предлагали пользователям возможность прослушивания потокового звука без наличия компьютера.\r\nВ основном, мультимедиа информация занимает большие объёмы, так что затраты на хранение и передачу подобной информации всегда велики; поэтому, в большинстве случаев, передаваемая в поток информация сжимается при передаче в сеть вещания.\r\nМультимедиа потоки бывают двух видов: по запросу или живыми. Потоки информации, вызываемой по запросу пользователя, хранятся на серверах продолжительный период времени. Живые потоки доступны короткий период времени, например, при передаче видео со спортивных соревнований.\r\nПотоковое вещание и хранение информации[править | править вики-текст]\r\n\r\nРеализация сервера потокового вещания по принципу 1 клиент — 1 соединение\r\nРазмер, необходимый для хранения потоковой мультимедиа информации (в большинстве файловых систем выражается в мегабайтах, гигабайтах, терабайтах и т. д.) вычисляется в зависимости от скорости передаваемой информации и продолжительности информации по следующей формуле (для одного пользователя и файла):\r\nразмер хранилища (в мегабайтах) = продолжительность (в секундах) * битрейт (в кбит/с) / (8 * 1024)\r\n(если считать, что 1 мегабайт = 8 * 1024 кбитов)\r\nПример из жизни:\r\nОдин час видео, закодированного со скоростью 300 кбит/с (типичное видео по состоянию на 2005 год, имеющее размер 320×240 пикселов), будет занимать:\r\n(3600 с * 300 кбит/с) / (8*1024) = порядка 128 Мб места на диске\r\nЕсли файл, хранимый на сервере с режимом передачи по запросу, будут просматривать 1000 людей одновременно по протоколу Unicast (1 клиент — 1 соединение), то сервер должен иметь следующую пропускную способность:\r\n300 кбит/с * 1000 = 300.000 кбит/с = 300 Мбит/с сетевого интерфейса\r\nЭто эквивалент порядка 135 ГБ информации в час. Разумеется, при использовании протокола Multicast нагрузка на сервер намного ниже, так как для передачи информации всем клиентам используется единственный поток. Следовательно, такой поток будет занимать всего 300 кбит/с сетевого интерфейса сервера. Более подробная информация об этих протоколах даётся ниже.\r\nЕсли же видео 1080p 60p 3.472222 МБ/с * 8 = 27.777 мбит/сек * 1000 = 27.777 гбит/сек\r\n2160p 120p 27.777 МБ/сек * 8 =222.222 мбит/сек * 1000 = 222.222 гбит/сек\r\nПротоколы потокового вещания[править | править вики-текст]\r\nРазработка сетевых протоколов потокового вещания вызывает следующие проблемы:\r\nДатаграмные протоколы, такие как User Datagram Protocol (UDP), отправляют поток медиаинформации как поток отдельных маленьких пакетов. Он прост и эффективен; в то же время, в спецификации протокола нет гарантии доставки данных получателю. Это очень сильно затрудняет поиск и исправление получаемых данных принимающим информацию приложением. При потере данных поток может быть отключен.\r\nПротоколы RTSP, RTP и RTCP специально разрабатывались для передачи мультимедийной информации по сети. Последние два построены на основе UDP.\r\nНадежные протоколы, такие как TCP, гарантируют корректность получаемых данных клиентов потокового вещания. Однако при большом количестве ошибок при соединении/подтверждении получаемой информации передаваемая информация может стать неактуальной. Это также может вызвать значительные задержки при передаче информации на время, затраченное на пересылку поврежденной информации. Одним из решений данной проблемы является буферизация информации на стороне клиента.\r\nПротоколы Unicast отправляют отдельную копию данных каждому клиенту. Unicast подходит для большинства пользователей сети Интернет, но сильно затрудняет масштабирование сервера для бо́льшего количества клиентов.\r\n\r\nПри широковещательной передаче одна копия данных передается всем клиентам сервера\r\nПротоколы Multicast разработаны для снижения нагрузки с серверов на подключения/ширину канала при получении потокового мультимедиа большим количеством клиентов. Эти протоколы отсылают одну порцию данных целой группе клиентов. В зависимости от типа сетевой инфраструктуры, групповая передача данных может быть доступна, а может и не быть. Одним из потенциальных недостатков групповой передачи является отсутствие возможности реализовать функцию видео по запросу. Непрерывное вещание потоковой информации также делает невозможным управление воспроизведением пользователем. Однако, эта проблема может быть решена внедрением в сеть передачи данных кэширующих серверов и буферизирующего принимаемый поток программного обеспечения.\r\nMulticast позволяет передавать один поток информации группе клиентов по сети. Одной из проблем при реализации подобной схемы потокового вещания является корректная настройка маршрутизаторов для передачи широковещательных пакетов из одного сегмента сети в другой. Если организация, предоставляющая потоковое вещание, имеет контроль над сетью между сервером и клиентами (например, в образовательной, правительственной или корпоративной сети), то протоколы маршрутизации, такие как IGMP и PIM, могут быть использованы для доставки мультимедиа нескольким клиентам из различных сегментов LAN.\r\nПротоколы P2P могут использоваться при распространении предварительно записанной мультимедиа между компьютерами. Это снимает нагрузку с сервера, однако сеть передачи данных между сервером и одним из клиентов становится узким местом данного варианта реализации потокового вещания информации.\r\nСм. также[править | править вики-текст]\r\nIPTV\r\nСписок систем потокового мультимедиа\r\nЦифровое телевидение\r\nMPEG-DASH\r\n\r\nQuestion book-4.svg\r\nВ этой статье не хватает ссылок на источники информации.\r\nИнформация должна быть проверяема, иначе она может быть поставлена под сомнение и удалена.\r\nВы можете отредактировать эту статью, добавив ссылки на авторитетные источники.\r\nЭта отметка установлена 14 мая 2011 года.\r\nКатегория: Мультимедиа\r\nНавигация\r\nВы не представились системеОбсуждениеВкладСоздать учётную записьВойтиСтатьяОбсуждениеЧитатьТекущая версияПравитьПравить вики-текстИсторияПоиск\r\n\r\nИскать в Википедии\r\nПерейти\r\nЗаглавная страница\r\nРубрикация\r\nУказатель А — Я\r\nИзбранные статьи\r\nСлучайная статья\r\nТекущие события\r\nУчастие\r\nСообщить об ошибке\r\nПортал сообщества\r\nФорум\r\nСвежие правки\r\nНовые страницы\r\nСправка\r\nПожертвовать\r\nИнструменты\r\nСсылки сюда\r\nСвязанные правки\r\nСпецстраницы\r\nПостоянная ссылка\r\nСведения о странице\r\nЦитировать страницу\r\nПечать/экспорт\r\nСоздать книгу\r\nСкачать как PDF\r\nВерсия для печати\r\nВ других проектах\r\nВикисклад\r\nВикиданные\r\nНа других языках\r\nالعربية\r\nDeutsch\r\nEnglish\r\nEspañol\r\nFrançais\r\nहिन्दी\r\n日本語\r\nPortuguês\r\n中文\r\nЕщё 32\r\nПравить ссылки\r\nПоследнее изменение этой страницы: 16:25, 8 ноября 2016.\r\nТекст доступен по лицензии Creative Commons Attribution-ShareAlike; в отдельных случаях могут действовать дополнительные условия. Подробнее см. Условия использования.\r\nWikipedia® — зарегистрированный товарный знак некоммерческой организации Wikimedia Foundation, Inc.\r\nСвяжитесь с нами\r\nПолитика конфиденциальностиОписание ВикипедииОтказ от ответственностиРазработчикиСоглашение о cookieМобильная версияWikimedia Foundation Powered by MediaWiki\r\n', '9 241\r\n'),
	r\n'),
	(1708, 5, '-', '45 45\r\n'),
	(1708, 6, '~!@#$%^&*()_+|', '33 126\r\n'),
	(1709, 0, 'EAZZZY', '90 3\r\n'),
	(1709, 1, 'ABCDABCDABCDABCDddd', '100 3\r\n'),
	(1709, 2, '0123456789012345678901234567890123456789', '57 4\r\n'),
	(1709, 3, 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n		int count = 0;\r\n		int sum = 0;\r\n		while (true)\r\n		{\r\n			int x = System.in.read();\r\n			if (x == -1) break; // CTRL Z\r\n			count ++;\r\n			sum += x;\r\n		}\r\n		if (count == 0)\r\n		    count = 1;\r\n		System.out.println(sum / count);\r\n	}\r\n}', '125 3\r\n'),
	r\n'),
	(1709, 5, 'Потоковое мультимедиа\r\n[править | править вики-текст]Материал из Википедии — свободной энциклопедии\r\n(перенаправлено с «Stream»)\r\nТекущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 6 января 2015; проверки требуют 12 правок.\r\nПотоковое мультимедиа (от. англ. streaming media) — это мультимедиа, которое непрерывно получается пользователем от провайдера потокового вещания. Это понятие применимо как к информации, распространяемой через телекоммуникации, так и к информации, которая изначально распространялась посредством потокового вещания (например, радио, телевидение) или непотоковой (например, книги, видеокассеты, аудио CD).\r\nСодержание  [скрыть] \r\n1	История\r\n2	Потоковое вещание и хранение информации\r\n3	Протоколы потокового вещания\r\n4	См. также\r\nИстория[править | править вики-текст]\r\nПервые попытки отображения мультимедийной информации на компьютерах начались в середине XX века. Однако, прогресс в этой сфере был очень малым, вследствие высокой стоимости и ограниченных возможностей компьютеров тех времён.\r\nС конца 1980-х и до 1990-х компьютеры, доступные потребителям, уже были способны отображать различные виды информации. Основными техническими проблемами потокового вещания были:\r\nналичие достаточно производительного CPU и шины для передачи мультимедиа необходимого битрейта\r\nТем не менее, компьютерные сети оставались ограниченными, а потоковое мультимедиа уступало традиционному (CD-ROM).\r\nВ период с 1990 до 2000 пользователи интернета получили:\r\nвысокую пропускную способность сетей, в частности, на последней миле\r\nвозросло количество абонентов сетей, особенно Интернета\r\nстали использоваться стандартизованные протоколы и форматы, такие как TCP/IP, HTTP и HTML\r\nпоявилась коммерция в Интернете\r\nЭти достижения в области сетей в совокупности с высокопроизводительными домашними компьютерами и современными операционными системами сделали потоковую мультимедийную информацию доступной широкому кругу простых пользователей. Автономные приёмники интернет-радио предлагали пользователям возможность прослушивания потокового звука без наличия компьютера.\r\nВ основном, мультимедиа информация занимает большие объёмы, так что затраты на хранение и передачу подобной информации всегда велики; поэтому, в большинстве случаев, передаваемая в поток информация сжимается при передаче в сеть вещания.\r\nМультимедиа потоки бывают двух видов: по запросу или живыми. Потоки информации, вызываемой по запросу пользователя, хранятся на серверах продолжительный период времени. Живые потоки доступны короткий период времени, например, при передаче видео со спортивных соревнований.\r\nПотоковое вещание и хранение информации[править | править вики-текст]\r\n\r\nРеализация сервера потокового вещания по принципу 1 клиент — 1 соединение\r\nРазмер, необходимый для хранения потоковой мультимедиа информации (в большинстве файловых систем выражается в мегабайтах, гигабайтах, терабайтах и т. д.) вычисляется в зависимости от скорости передаваемой информации и продолжительности информации по следующей формуле (для одного пользователя и файла):\r\nразмер хранилища (в мегабайтах) = продолжительность (в секундах) * битрейт (в кбит/с) / (8 * 1024)\r\n(если считать, что 1 мегабайт = 8 * 1024 кбитов)\r\nПример из жизни:\r\nОдин час видео, закодированного со скоростью 300 кбит/с (типичное видео по состоянию на 2005 год, имеющее размер 320×240 пикселов), будет занимать:\r\n(3600 с * 300 кбит/с) / (8*1024) = порядка 128 Мб места на диске\r\nЕсли файл, хранимый на сервере с режимом передачи по запросу, будут просматривать 1000 людей одновременно по протоколу Unicast (1 клиент — 1 соединение), то сервер должен иметь следующую пропускную способность:\r\n300 кбит/с * 1000 = 300.000 кбит/с = 300 Мбит/с сетевого интерфейса\r\nЭто эквивалент порядка 135 ГБ информации в час. Разумеется, при использовании протокола Multicast нагрузка на сервер намного ниже, так как для передачи информации всем клиентам используется единственный поток. Следовательно, такой поток будет занимать всего 300 кбит/с сетевого интерфейса сервера. Более подробная информация об этих протоколах даётся ниже.\r\nЕсли же видео 1080p 60p 3.472222 МБ/с * 8 = 27.777 мбит/сек * 1000 = 27.777 гбит/сек\r\n2160p 120p 27.777 МБ/сек * 8 =222.222 мбит/сек * 1000 = 222.222 гбит/сек\r\nПротоколы потокового вещания[править | править вики-текст]\r\nРазработка сетевых протоколов потокового вещания вызывает следующие проблемы:\r\nДатаграмные протоколы, такие как User Datagram Protocol (UDP), отправляют поток медиаинформации как поток отдельных маленьких пакетов. Он прост и эффективен; в то же время, в спецификации протокола нет гарантии доставки данных получателю. Это очень сильно затрудняет поиск и исправление получаемых данных принимающим информацию приложением. При потере данных поток может быть отключен.\r\nПротоколы RTSP, RTP и RTCP специально разрабатывались для передачи мультимедийной информации по сети. Последние два построены на основе UDP.\r\nНадежные протоколы, такие как TCP, гарантируют корректность получаемых данных клиентов потокового вещания. Однако при большом количестве ошибок при соединении/подтверждении получаемой информации передаваемая информация может стать неактуальной. Это также может вызвать значительные задержки при передаче информации на время, затраченное на пересылку поврежденной информации. Одним из решений данной проблемы является буферизация информации на стороне клиента.\r\nПротоколы Unicast отправляют отдельную копию данных каждому клиенту. Unicast подходит для большинства пользователей сети Интернет, но сильно затрудняет масштабирование сервера для бо́льшего количества клиентов.\r\n\r\nПри широковещательной передаче одна копия данных передается всем клиентам сервера\r\nПротоколы Multicast разработаны для снижения нагрузки с серверов на подключения/ширину канала при получении потокового мультимедиа большим количеством клиентов. Эти протоколы отсылают одну порцию данных целой группе клиентов. В зависимости от типа сетевой инфраструктуры, групповая передача данных может быть доступна, а может и не быть. Одним из потенциальных недостатков групповой передачи является отсутствие возможности реализовать функцию видео по запросу. Непрерывное вещание потоковой информации также делает невозможным управление воспроизведением пользователем. Однако, эта проблема может быть решена внедрением в сеть передачи данных кэширующих серверов и буферизирующего принимаемый поток программного обеспечения.\r\nMulticast позволяет передавать один поток информации группе клиентов по сети. Одной из проблем при реализации подобной схемы потокового вещания является корректная настройка маршрутизаторов для передачи широковещательных пакетов из одного сегмента сети в другой. Если организация, предоставляющая потоковое вещание, имеет контроль над сетью между сервером и клиентами (например, в образовательной, правительственной или корпоративной сети), то протоколы маршрутизации, такие как IGMP и PIM, могут быть использованы для доставки мультимедиа нескольким клиентам из различных сегментов LAN.\r\nПротоколы P2P могут использоваться при распространении предварительно записанной мультимедиа между компьютерами. Это снимает нагрузку с сервера, однако сеть передачи данных между сервером и одним из клиентов становится узким местом данного варианта реализации потокового вещания информации.\r\nСм. также[править | править вики-текст]\r\nIPTV\r\nСписок систем потокового мультимедиа\r\nЦифровое телевидение\r\nMPEG-DASH\r\n\r\nQuestion book-4.svg\r\nВ этой статье не хватает ссылок на источники информации.\r\nИнформация должна быть проверяема, иначе она может быть поставлена под сомнение и удалена.\r\nВы можете отредактировать эту статью, добавив ссылки на авторитетные источники.\r\nЭта отметка установлена 14 мая 2011 года.\r\nКатегория: Мультимедиа\r\nНавигация\r\nВы не представились системеОбсуждениеВкладСоздать учётную записьВойтиСтатьяОбсуждениеЧитатьТекущая версияПравитьПравить вики-текстИсторияПоиск\r\n\r\nИскать в Википедии\r\nПерейти\r\nЗаглавная страница\r\nРубрикация\r\nУказатель А — Я\r\nИзбранные статьи\r\nСлучайная статья\r\nТекущие события\r\nУчастие\r\nСообщить об ошибке\r\nПортал сообщества\r\nФорум\r\nСвежие правки\r\nНовые страницы\r\nСправка\r\nПожертвовать\r\nИнструменты\r\nСсылки сюда\r\nСвязанные правки\r\nСпецстраницы\r\nПостоянная ссылка\r\nСведения о странице\r\nЦитировать страницу\r\nПечать/экспорт\r\nСоздать книгу\r\nСкачать как PDF\r\nВерсия для печати\r\nВ других проектах\r\nВикисклад\r\nВикиданные\r\nНа других языках\r\nالعربية\r\nDeutsch\r\nEnglish\r\nEspañol\r\nFrançais\r\nहिन्दी\r\n日本語\r\nPortuguês\r\n中文\r\nЕщё 32\r\nПравить ссылки\r\nПоследнее изменение этой страницы: 16:25, 8 ноября 2016.\r\nТекст доступен по лицензии Creative Commons Attribution-ShareAlike; в отдельных случаях могут действовать дополнительные условия. Подробнее см. Условия использования.\r\nWikipedia® — зарегистрированный товарный знак некоммерческой организации Wikimedia Foundation, Inc.\r\nСвяжитесь с нами\r\nПолитика конфиденциальностиОписание ВикипедииОтказ от ответственностиРазработчикиСоглашение о cookieМобильная версияWikimedia Foundation Powered by MediaWiki\r\n', '241 6\r\n'),
	(1709, 6, 'ZA', '90 1\r\n'),
	(1710, 0, 'public static void main', '1\r\n'),
	(1710, 1, 'void v o i d  v  o  i  d\r\n', '1\r\n'),
	(1710, 2, 'voidvoidvoidvoidvoidvoidvoidvoidvoidvoidvoidvoid', '12\r\n'),
	(1710, 3, 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n		int [] word = { 118, 111, 105, 100 };\r\n		int count = 0;\r\n		int index = 0;\r\n		while (true)\r\n		{\r\n			int x = System.in.read();\r\n			if (x == -1) break; // CTRL Z\r\n			if (x == word [index])\r\n			{ \r\n			    index ++;\r\n			    if (index == word.length)\r\n			    {\r\n			        count ++;\r\n			        index = 0;\r\n			    }\r\n			} else\r\n			    index = 0;\r\n		}\r\n		System.out.println(count);\r\n	}\r\n}', '1\r\n'),
	(1710, 4, 'voi', '0\r\n'),
	(1710, 5, 'Потоковое мультимедиа\r\n[править | править вики-текст]Материал из Википедии — свободной энциклопедии\r\n(перенаправлено с «Stream»)\r\nТекущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 6 января 2015; проверки требуют 12 правок.\r\nПотоковое мультимедиа (от. англ. streaming media) — это мультимедиа, которое непрерывно получается пользователем от провайдера потокового вещания. Это понятие применимо как к информации, распространяемой через телекоммуникации, так и к информации, которая изначально распространялась посредством потокового вещания (например, радио, телевидение) или непотоковой (например, книги, видеокассеты, аудио CD).\r\nСодержание  [скрыть] \r\n1	История\r\n2	Потоковое вещание и хранение информации\r\n3	Протоколы потокового вещания\r\n4	См. также\r\nИстория[править | править вики-текст]\r\nПервые попытки отображения мультимедийной информации на компьютерах начались в середине XX века. Однако, прогресс в этой сфере был очень малым, вследствие высокой стоимости и ограниченных возможностей компьютеров тех времён.\r\nС конца 1980-х и до 1990-х компьютеры, доступные потребителям, уже были способны отображать различные виды информации. Основными техническими проблемами потокового вещания были:\r\nналичие достаточно производительного CPU и шины для передачи мультимедиа необходимого битрейта\r\nТем не менее, компьютерные сети оставались ограниченными, а потоковое мультимедиа уступало традиционному (CD-ROM).\r\nВ период с 1990 до 2000 пользователи интернета получили:\r\nвысокую пропускную способность сетей, в частности, на последней миле\r\nвозросло количество абонентов сетей, особенно Интернета\r\nстали использоваться стандартизованные протоколы и форматы, такие как TCP/IP, HTTP и HTML\r\nпоявилась коммерция в Интернете\r\nЭти достижения в области сетей в совокупности с высокопроизводительными домашними компьютерами и современными операционными системами сделали потоковую мультимедийную информацию доступной широкому кругу простых пользователей. Автономные приёмники интернет-радио предлагали пользователям возможность прослушивания потокового звука без наличия компьютера.\r\nВ основном, мультимедиа информация занимает большие объёмы, так что затраты на хранение и передачу подобной информации всегда велики; поэтому, в большинстве случаев, передаваемая в поток информация сжимается при передаче в сеть вещания.\r\nМультимедиа потоки бывают двух видов: по запросу или живыми. Потоки информации, вызываемой по запросу пользователя, хранятся на серверах продолжительный период времени. Живые потоки доступны короткий период времени, например, при передаче видео со спортивных соревнований.\r\nПотоковое вещание и хранение информации[править | править вики-текст]\r\n\r\nРеализация сервера потокового вещания по принципу 1 клиент — 1 соединение\r\nРазмер, необходимый для хранения потоковой мультимедиа информации (в большинстве файловых систем выражается в мегабайтах, гигабайтах, терабайтах и т. д.) вычисляется в зависимости от скорости передаваемой информации и продолжительности информации по следующей формуле (для одного пользователя и файла):\r\nразмер хранилища (в мегабайтах) = продолжительность (в секундах) * битрейт (в кбит/с) / (8 * 1024)\r\n(если считать, что 1 мегабайт = 8 * 1024 кбитов)\r\nПример из жизни:\r\nОдин час видео, закодированного со скоростью 300 кбит/с (типичное видео по состоянию на 2005 год, имеющее размер 320×240 пикселов), будет занимать:\r\n(3600 с * 300 кбит/с) / (8*1024) = порядка 128 Мб места на диске\r\nЕсли файл, хранимый на сервере с режимом передачи по запросу, будут просматривать 1000 людей одновременно по протоколу Unicast (1 клиент — 1 соединение), то сервер должен иметь следующую пропускную способность:\r\n300 кбит/с * 1000 = 300.000 кбит/с = 300 Мбит/с сетевого интерфейса\r\nЭто эквивалент порядка 135 ГБ информации в час. Разумеется, при использовании протокола Multicast нагрузка на сервер намного ниже, так как для передачи информации всем клиентам используется единственный поток. Следовательно, такой поток будет занимать всего 300 кбит/с сетевого интерфейса сервера. Более подробная информация об этих протоколах даётся ниже.\r\nЕсли же видео 1080p 60p 3.472222 МБ/с * 8 = 27.777 мбит/сек * 1000 = 27.777 гбит/сек\r\n2160p 120p 27.777 МБ/сек * 8 =222.222 мбит/сек * 1000 = 222.222 гбит/сек\r\nПротоколы потокового вещания[править | править вики-текст]\r\nРазработка сетевых протоколов потокового вещания вызывает следующие проблемы:\r\nДатаграмные протоколы, такие как User Datagram Protocol (UDP), отправляют поток медиаинформации как поток отдельных маленьких пакетов. Он прост и эффективен; в то же время, в спецификации протокола нет гарантии доставки данных получателю. Это очень сильно затрудняет поиск и исправление получаемых данных принимающим информацию приложением. При потере данных поток может быть отключен.\r\nПротоколы RTSP, RTP и RTCP специально разрабатывались для передачи мультимедийной информации по сети. Последние два построены на основе UDP.\r\nНадежные протоколы, такие как TCP, гарантируют корректность получаемых данных клиентов потокового вещания. Однако при большом количестве ошибок при соединении/подтверждении получаемой информации передаваемая информация может стать неактуальной. Это также может вызвать значительные задержки при передаче информации на время, затраченное на пересылку поврежденной информации. Одним из решений данной проблемы является буферизация информации на стороне клиента.\r\nПротоколы Unicast отправляют отдельную копию данных каждому клиенту. Unicast подходит для большинства пользователей сети Интернет, но сильно затрудняет масштабирование сервера для бо́льшего количества клиентов.\r\n\r\nПри широковещательной передаче одна копия данных передается всем клиентам сервера\r\nПротоколы Multicast разработаны для снижения нагрузки с серверов на подключения/ширину канала при получении потокового мультимедиа большим количеством клиентов. Эти протоколы отсылают одну порцию данных целой группе клиентов. В зависимости от типа сетевой инфраструктуры, групповая передача данных может быть доступна, а может и не быть. Одним из потенциальных недостатков групповой передачи является отсутствие возможности реализовать функцию видео по запросу. Непрерывное вещание потоковой информации также делает невозможным управление воспроизведением пользователем. Однако, эта проблема может быть решена внедрением в сеть передачи данных кэширующих серверов и буферизирующего принимаемый поток программного обеспечения.\r\nMulticast позволяет передавать один поток информации группе клиентов по сети. Одной из проблем при реализации подобной схемы потокового вещания является корректная настройка маршрутизаторов для передачи широковещательных пакетов из одного сегмента сети в другой. Если организация, предоставляющая потоковое вещание, имеет контроль над сетью между сервером и клиентами (например, в образовательной, правительственной или корпоративной сети), то протоколы маршрутизации, такие как IGMP и PIM, могут быть использованы для доставки мультимедиа нескольким клиентам из различных сегментов LAN.\r\nПротоколы P2P могут использоваться при распространении предварительно записанной мультимедиа между компьютерами. Это снимает нагрузку с сервера, однако сеть передачи данных между сервером и одним из клиентов становится узким местом данного варианта реализации потокового вещания информации.\r\nСм. также[править | править вики-текст]\r\nIPTV\r\nСписок систем потокового мультимедиа\r\nЦифровое телевидение\r\nMPEG-DASH\r\n\r\nQuestion book-4.svg\r\nВ этой статье не хватает ссылок на источники информации.\r\nИнформация должна быть проверяема, иначе она может быть поставлена под сомнение и удалена.\r\nВы можете отредактировать эту статью, добавив ссылки на авторитетные источники.\r\nЭта отметка установлена 14 мая 2011 года.\r\nКатегория: Мультимедиа\r\nНавигация\r\nВы не представились системеОбсуждениеВкладСоздать учётную записьВойтиСтатьяОбсуждениеЧитатьТекущая версияПравитьПравить вики-текстИсторияПоиск\r\n\r\nИскать в Википедии\r\nПерейти\r\nЗаглавная страница\r\nРубрикация\r\nУказатель А — Я\r\nИзбранные статьи\r\nСлучайная статья\r\nТекущие события\r\nУчастие\r\nСообщить об ошибке\r\nПортал сообщества\r\nФорум\r\nСвежие правки\r\nНовые страницы\r\nСправка\r\nПожертвовать\r\nИнструменты\r\nСсылки сюда\r\nСвязанные правки\r\nСпецстраницы\r\nПостоянная ссылка\r\nСведения о странице\r\nЦитировать страницу\r\nПечать/экспорт\r\nСоздать книгу\r\nСкачать как PDF\r\nВерсия для печати\r\nВ других проектах\r\nВикисклад\r\nВикиданные\r\nНа других языках\r\nالعربية\r\nDeutsch\r\nEnglish\r\nEspañol\r\nFrançais\r\nहिन्दी\r\n日本語\r\nPortuguês\r\n中文\r\nЕщё 32\r\nПравить ссылки\r\nПоследнее изменение этой страницы: 16:25, 8 ноября 2016.\r\nТекст доступен по лицензии Creative Commons Attribution-ShareAlike; в отдельных случаях могут действовать дополнительные условия. Подробнее см. Условия использования.\r\nWikipedia® — зарегистрированный товарный знак некоммерческой организации Wikimedia Foundation, Inc.\r\nСвяжитесь с нами\r\nПолитика конфиденциальностиОписание ВикипедииОтказ от ответственностиРазработчикиСоглашение о cookieМобильная версияWikimedia Foundation Powered by MediaWiki\r\n', '0\r\n'),
	(1711, 0, '00011122203334441555', '012345\r\n'),
	(1711, 1, 'VideoSharp.info', 'Vior\r\n'),
	(1711, 2, '1234567890-=\\~!@#$%^&*()_+|', '123456789=\\~\r\n'),
	(1711, 3, 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n	    int max = -1;\r\n		while (true)\r\n		{\r\n			int x = System.in.read();\r\n			if (x == -1) break;\r\n			if (x > max)\r\n			{\r\n			    max = x;\r\n    		    System.out.print((char)max);\r\n			}\r\n		}\r\n	}\r\n}', 'pu{}\r\n'),
	(1711, 4, 'Z', 'Z\r\n'),
	(1711, 5, 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz\r\n'),
	(1711, 6, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum z.', 'Lorsuvxz\r\n'),
	(1712, 0, '22234222', '150\r\n151\r\n153\r\n153\r\n152\r\n150\r\n'),
	(1712, 1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n', '198\r\n201\r\n204\r\n207\r\n210\r\n213\r\n216\r\n219\r\n222\r\n225\r\n228\r\n231\r\n234\r\n237\r\n240\r\n243\r\n246\r\n249\r\n252\r\n255\r\n258\r\n261\r\n264\r\n267\r\n192\r\n113\r\n'),
	(1712, 2, '1234567890-=\\~!@#$%^&*()_+|', '150\r\n153\r\n156\r\n159\r\n162\r\n165\r\n168\r\n161\r\n150\r\n154\r\n198\r\n279\r\n251\r\n223\r\n132\r\n135\r\n108\r\n167\r\n169\r\n174\r\n120\r\n123\r\n176\r\n179\r\n262\r\n'),
	(1712, 3, 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n		int x1 = System.in.read();\r\n		int x2 = System.in.read();\r\n		int x3 = 0;\r\n		while (true)\r\n		{\r\n		    x3 = System.in.read();\r\n		    if (x3 == -1) break;\r\n		    int sum = x1 + x2 + x3;\r\n		    System.out.println(sum);\r\n		    x1 = x2;\r\n		    x2 = x3;\r\n		}\r\n	}\r\n}', '327\r\n323\r\n311\r\n312\r\n236\r\n230\r\n239\r\n304\r\n320\r\n327\r\n262\r\n227\r\n226\r\n305\r\n328\r\n328\r\n314\r\n320\r\n238\r\n154\r\n55\r\n146\r\n146\r\n146\r\n32\r\n131\r\n238\r\n327\r\n323\r\n311\r\n312\r\n236\r\n246\r\n263\r\n328\r\n329\r\n318\r\n320\r\n236\r\n249\r\n261\r\n334\r\n316\r\n237\r\n241\r\n238\r\n311\r\n312\r\n255\r\n233\r\n239\r\n313\r\n335\r\n329\r\n318\r\n304\r\n287\r\n216\r\n222\r\n243\r\n314\r\n332\r\n259\r\n188\r\n86\r\n55\r\n32\r\n28\r\n50\r\n73\r\n96\r\n180\r\n252\r\n334\r\n329\r\n344\r\n345\r\n266\r\n216\r\n221\r\n288\r\n320\r\n312\r\n329\r\n333\r\n332\r\n326\r\n253\r\n155\r\n55\r\n32\r\n142\r\n145\r\n146\r\n32\r\n28\r\n123\r\n224\r\n331\r\n258\r\n268\r\n201\r\n201\r\n142\r\n125\r\n176\r\n236\r\n319\r\n352\r\n332\r\n326\r\n256\r\n260\r\n261\r\n261\r\n270\r\n261\r\n312\r\n298\r\n237\r\n181\r\n140\r\n113\r\n82\r\n32\r\n28\r\n123\r\n224\r\n331\r\n258\r\n268\r\n202\r\n202\r\n143\r\n125\r\n176\r\n236\r\n319\r\n352\r\n332\r\n326\r\n256\r\n260\r\n261\r\n261\r\n270\r\n261\r\n312\r\n298\r\n237\r\n181\r\n140\r\n113\r\n82\r\n32\r\n28\r\n123\r\n224\r\n331\r\n258\r\n268\r\n203\r\n203\r\n144\r\n125\r\n141\r\n139\r\n120\r\n82\r\n32\r\n28\r\n137\r\n232\r\n328\r\n317\r\n314\r\n241\r\n173\r\n188\r\n270\r\n347\r\n332\r\n259\r\n155\r\n64\r\n32\r\n28\r\n141\r\n145\r\n146\r\n32\r\n28\r\n50\r\n73\r\n96\r\n96\r\n184\r\n203\r\n203\r\n144\r\n125\r\n176\r\n236\r\n319\r\n352\r\n332\r\n326\r\n256\r\n260\r\n261\r\n261\r\n270\r\n261\r\n312\r\n298\r\n237\r\n181\r\n140\r\n113\r\n82\r\n32\r\n28\r\n50\r\n73\r\n96\r\n96\r\n169\r\n239\r\n239\r\n174\r\n192\r\n211\r\n203\r\n144\r\n154\r\n154\r\n138\r\n126\r\n135\r\n122\r\n171\r\n244\r\n313\r\n312\r\n305\r\n263\r\n179\r\n82\r\n32\r\n28\r\n50\r\n73\r\n96\r\n96\r\n169\r\n247\r\n331\r\n258\r\n263\r\n264\r\n341\r\n258\r\n202\r\n125\r\n213\r\n201\r\n201\r\n124\r\n107\r\n195\r\n202\r\n202\r\n125\r\n107\r\n195\r\n203\r\n230\r\n123\r\n82\r\n32\r\n28\r\n50\r\n73\r\n96\r\n96\r\n147\r\n236\r\n319\r\n352\r\n332\r\n326\r\n256\r\n266\r\n274\r\n344\r\n279\r\n274\r\n272\r\n331\r\n329\r\n331\r\n334\r\n334\r\n258\r\n265\r\n272\r\n341\r\n267\r\n209\r\n113\r\n82\r\n32\r\n28\r\n50\r\n73\r\n96\r\n96\r\n184\r\n201\r\n201\r\n142\r\n125\r\n213\r\n202\r\n229\r\n122\r\n82\r\n32\r\n28\r\n50\r\n73\r\n96\r\n96\r\n184\r\n202\r\n202\r\n143\r\n125\r\n213\r\n203\r\n230\r\n123\r\n82\r\n32\r\n28\r\n143\r\n147\r\n148\r\n32\r\n144\r\n147\r\n148\r\n148\r\n'),
	(1712, 4, 'VideoSharp.info', '291\r\n306\r\n312\r\n295\r\n298\r\n284\r\n315\r\n323\r\n272\r\n263\r\n261\r\n317\r\n323\r\n'),
	(1712, 5, 'A', ''),
	(1712, 6, 'AB', ''),
	(1712, 7, 'ABC', '198\r\n'),
	(1712, 8, '1\r\n\r\n\r\n\r\n\r\n\r\n2\r\n', '72\r\n36\r\n33\r\n36\r\n33\r\n36\r\n33\r\n36\r\n33\r\n36\r\n33\r\n73\r\n73\r\n73\r\n'),
	(1713, 0, '1232457989546780', '245767\r\n'),
	(1713, 1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n', 'BCDEFGHIJKLMNOPQRSTUVWXY\r\n'),
	(1713, 2, '1234567890-=\\~!@#$%^&*()_+|', '2345678=\\$%)\r\n'),
	(1713, 3, 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n		int x1 = System.in.read();\r\n		int x2 = System.in.read();\r\n		int x3 = 0;\r\n		while (true)\r\n		{\r\n		    x3 = System.in.read();\r\n		    if (x3 == -1) break;\r\n		    if (x1 < x2 && x2 < x3)\r\n		        System.out.print((char)x2);\r\n		    x1 = x2;\r\n		    x2 = x3;\r\n		}\r\n		System.out.println();\r\n	}\r\n}', 'cPpsiSaEepinSi)inSi)in0i(Si)(-b(SopncSopn)\r\n'),
	(1713, 4, 'VideoSharp.info', 'ei\r\n'),
	(1713, 5, 'A', '\r\n'),
	(1713, 6, 'AB', '\r\n'),
	(1713, 7, 'ABC', 'B\r\n'),
	(1713, 8, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.', 'oipsdoactadiiedeimiboedogaqUeaqnoseiboaqeccqDairdoipeiecidoefntEepncnpensicqdermaesbor\r\n'),
	(1720, 0, '1', 'понедельник\r\n'),
	(1720, 1, '2', 'вторник\r\n'),
	(1720, 2, '3', 'среда\r\n'),
	(1720, 3, '4', 'четверг\r\n'),
	(1720, 4, '5', 'пятница\r\n'),
	(1720, 5, '6', 'суббота\r\n'),
	(1720, 6, '7', 'воскресенье\r\n'),
	(3665, 0, 'Зимой и летом одним цветом (ёлка).\r\nдоллар', 'Зимой и летом одним цветом (доллар).\r\n'),
	(3665, 1, '()\r\nsmile', '(smile)\r\n'),
	(3665, 2, '(aaaaaaaaaaaaaaaaaaa)\r\nbbbbbbbbbbb', '(bbbbbbbbbbb)\r\n'),
	(3665, 3, 'abc (eee) and (ooo) fff\r\nx\r\n', 'abc (x) and (ooo) fff\r\n'),
	(3665, 4, '(aa)(aa)(aa)\r\n1234567890123456789012345678901234567890123456789012345678901234567890\r\n', '(1234567890123456789012345678901234567890123456789012345678901234567890)(aa)(aa)\r\n'),
	(3666, 0, '255\r\n', '3\r\n'),
	(3666, 1, '9', '9\r\n'),
	(3666, 2, '0', '0\r\n'),
	(3666, 3, '3', '3\r\n'),
	(3666, 4, '123456789\r\n', '9\r\n'),
	(3666, 5, '99999999\r\n', '9\r\n'),
	(3666, 6, '99999998\r\n', '8\r\n'),
	(3666, 7, '27182818\r\n', '1\r\n'),
	(3666, 8, '31415926\r\n', '4\r\n'),
	(3666, 9, '111111111\r\n', '9\r\n'),
	(3669, 0, '10', '2\r\n3\r\n5\r\n7\r\n'),
	(3669, 1, '100', '2\r\n3\r\n5\r\n7\r\n11\r\n13\r\n17\r\n19\r\n23\r\n29\r\n31\r\n37\r\n41\r\n43\r\n47\r\n53\r\n59\r\n61\r\n67\r\n71\r\n73\r\n79\r\n83\r\n89\r\n97\r\n'),
	(3669, 2, '1000', '2\r\n3\r\n5\r\n7\r\n11\r\n13\r\n17\r\n19\r\n23\r\n29\r\n31\r\n37\r\n41\r\n43\r\n47\r\n53\r\n59\r\n61\r\n67\r\n71\r\n73\r\n79\r\n83\r\n89\r\n97\r\n101\r\n103\r\n107\r\n109\r\n113\r\n127\r\n131\r\n137\r\n139\r\n149\r\n151\r\n157\r\n163\r\n167\r\n173\r\n179\r\n181\r\n191\r\n193\r\n197\r\n199\r\n211\r\n223\r\n227\r\n229\r\n233\r\n239\r\n241\r\n251\r\n257\r\n263\r\n269\r\n271\r\n277\r\n281\r\n283\r\n293\r\n307\r\n311\r\n313\r\n317\r\n331\r\n337\r\n347\r\n349\r\n353\r\n359\r\n367\r\n373\r\n379\r\n383\r\n389\r\n397\r\n401\r\n409\r\n419\r\n421\r\n431\r\n433\r\n439\r\n443\r\n449\r\n457\r\n461\r\n463\r\n467\r\n479\r\n487\r\n491\r\n499\r\n503\r\n509\r\n521\r\n523\r\n541\r\n547\r\n557\r\n563\r\n569\r\n571\r\n577\r\n587\r\n593\r\n599\r\n601\r\n607\r\n613\r\n617\r\n619\r\n631\r\n641\r\n643\r\n647\r\n653\r\n659\r\n661\r\n673\r\n677\r\n683\r\n691\r\n701\r\n709\r\n719\r\n727\r\n733\r\n739\r\n743\r\n751\r\n757\r\n761\r\n769\r\n773\r\n787\r\n797\r\n809\r\n811\r\n821\r\n823\r\n827\r\n829\r\n839\r\n853\r\n857\r\n859\r\n863\r\n877\r\n881\r\n883\r\n887\r\n907\r\n911\r\n919\r\n929\r\n937\r\n941\r\n947\r\n953\r\n967\r\n971\r\n977\r\n983\r\n991\r\n997\r\n'),
	(3669, 3, '10000', '2\r\n3\r\n5\r\n7\r\n11\r\n13\r\n17\r\n19\r\n23\r\n29\r\n31\r\n37\r\n41\r\n43\r\n47\r\n53\r\n59\r\n61\r\n67\r\n71\r\n73\r\n79\r\n83\r\n89\r\n97\r\n101\r\n103\r\n107\r\n109\r\n113\r\n127\r\n131\r\n137\r\n139\r\n149\r\n151\r\n157\r\n163\r\n167\r\n173\r\n179\r\n181\r\n191\r\n193\r\n197\r\n199\r\n211\r\n223\r\n227\r\n229\r\n233\r\n239\r\n241\r\n251\r\n257\r\n263\r\n269\r\n271\r\n277\r\n281\r\n283\r\n293\r\n307\r\n311\r\n313\r\n317\r\n331\r\n337\r\n347\r\n349\r\n353\r\n359\r\n367\r\n373\r\n379\r\n383\r\n389\r\n397\r\n401\r\n409\r\n419\r\n421\r\n431\r\n433\r\n439\r\n443\r\n449\r\n457\r\n461\r\n463\r\n467\r\n479\r\n487\r\n491\r\n499\r\n503\r\n509\r\n521\r\n523\r\n541\r\n547\r\n557\r\n563\r\n569\r\n571\r\n577\r\n587\r\n593\r\n599\r\n601\r\n607\r\n613\r\n617\r\n619\r\n631\r\n641\r\n643\r\n647\r\n653\r\n659\r\n661\r\n673\r\n677\r\n683\r\n691\r\n701\r\n709\r\n719\r\n727\r\n733\r\n739\r\n743\r\n751\r\n757\r\n761\r\n769\r\n773\r\n787\r\n797\r\n809\r\n811\r\n821\r\n823\r\n827\r\n829\r\n839\r\n853\r\n857\r\n859\r\n863\r\n877\r\n881\r\n883\r\n887\r\n907\r\n911\r\n919\r\n929\r\n937\r\n941\r\n947\r\n953\r\n967\r\n971\r\n977\r\n983\r\n991\r\n997\r\n1009\r\n1013\r\n1019\r\n1021\r\n1031\r\n1033\r\n1039\r\n1049\r\n1051\r\n1061\r\n1063\r\n1069\r\n1087\r\n1091\r\n1093\r\n1097\r\n1103\r\n1109\r\n1117\r\n1123\r\n1129\r\n1151\r\n1153\r\n1163\r\n1171\r\n1181\r\n1187\r\n1193\r\n1201\r\n1213\r\n1217\r\n1223\r\n1229\r\n1231\r\n1237\r\n1249\r\n1259\r\n1277\r\n1279\r\n1283\r\n1289\r\n1291\r\n1297\r\n1301\r\n1303\r\n1307\r\n1319\r\n1321\r\n1327\r\n1361\r\n1367\r\n1373\r\n1381\r\n1399\r\n1409\r\n1423\r\n1427\r\n1429\r\n1433\r\n1439\r\n1447\r\n1451\r\n1453\r\n1459\r\n1471\r\n1481\r\n1483\r\n1487\r\n1489\r\n1493\r\n1499\r\n1511\r\n1523\r\n1531\r\n1543\r\n1549\r\n1553\r\n1559\r\n1567\r\n1571\r\n1579\r\n1583\r\n1597\r\n1601\r\n1607\r\n1609\r\n1613\r\n1619\r\n1621\r\n1627\r\n1637\r\n1657\r\n1663\r\n1667\r\n1669\r\n1693\r\n1697\r\n1699\r\n1709\r\n1721\r\n1723\r\n1733\r\n1741\r\n1747\r\n1753\r\n1759\r\n1777\r\n1783\r\n1787\r\n1789\r\n1801\r\n1811\r\n1823\r\n1831\r\n1847\r\n1861\r\n1867\r\n1871\r\n1873\r\n1877\r\n1879\r\n1889\r\n1901\r\n1907\r\n1913\r\n1931\r\n1933\r\n1949\r\n1951\r\n1973\r\n1979\r\n1987\r\n1993\r\n1997\r\n1999\r\n2003\r\n2011\r\n2017\r\n2027\r\n2029\r\n2039\r\n2053\r\n2063\r\n2069\r\n2081\r\n2083\r\n2087\r\n2089\r\n2099\r\n2111\r\n2113\r\n2129\r\n2131\r\n2137\r\n2141\r\n2143\r\n2153\r\n2161\r\n2179\r\n2203\r\n2207\r\n2213\r\n2221\r\n2237\r\n2239\r\n2243\r\n2251\r\n2267\r\n2269\r\n2273\r\n2281\r\n2287\r\n2293\r\n2297\r\n2309\r\n2311\r\n2333\r\n2339\r\n2341\r\n2347\r\n2351\r\n2357\r\n2371\r\n2377\r\n2381\r\n2383\r\n2389\r\n2393\r\n2399\r\n2411\r\n2417\r\n2423\r\n2437\r\n2441\r\n2447\r\n2459\r\n2467\r\n2473\r\n2477\r\n2503\r\n2521\r\n2531\r\n2539\r\n2543\r\n2549\r\n2551\r\n2557\r\n2579\r\n2591\r\n2593\r\n2609\r\n2617\r\n2621\r\n2633\r\n2647\r\n2657\r\n2659\r\n2663\r\n2671\r\n2677\r\n2683\r\n2687\r\n2689\r\n2693\r\n2699\r\n2707\r\n2711\r\n2713\r\n2719\r\n2729\r\n2731\r\n2741\r\n2749\r\n2753\r\n2767\r\n2777\r\n2789\r\n2791\r\n2797\r\n2801\r\n2803\r\n2819\r\n2833\r\n2837\r\n2843\r\n2851\r\n2857\r\n2861\r\n2879\r\n2887\r\n2897\r\n2903\r\n2909\r\n2917\r\n2927\r\n2939\r\n2953\r\n2957\r\n2963\r\n2969\r\n2971\r\n2999\r\n3001\r\n3011\r\n3019\r\n3023\r\n3037\r\n3041\r\n3049\r\n3061\r\n3067\r\n3079\r\n3083\r\n3089\r\n3109\r\n3119\r\n3121\r\n3137\r\n3163\r\n3167\r\n3169\r\n3181\r\n3187\r\n3191\r\n3203\r\n3209\r\n3217\r\n3221\r\n3229\r\n3251\r\n3253\r\n3257\r\n3259\r\n3271\r\n3299\r\n3301\r\n3307\r\n3313\r\n3319\r\n3323\r\n3329\r\n3331\r\n3343\r\n3347\r\n3359\r\n3361\r\n3371\r\n3373\r\n3389\r\n3391\r\n3407\r\n3413\r\n3433\r\n3449\r\n3457\r\n3461\r\n3463\r\n3467\r\n3469\r\n3491\r\n3499\r\n3511\r\n3517\r\n3527\r\n3529\r\n3533\r\n3539\r\n3541\r\n3547\r\n3557\r\n3559\r\n3571\r\n3581\r\n3583\r\n3593\r\n3607\r\n3613\r\n3617\r\n3623\r\n3631\r\n3637\r\n3643\r\n3659\r\n3671\r\n3673\r\n3677\r\n3691\r\n3697\r\n3701\r\n3709\r\n3719\r\n3727\r\n3733\r\n3739\r\n3761\r\n3767\r\n3769\r\n3779\r\n3793\r\n3797\r\n3803\r\n3821\r\n3823\r\n3833\r\n3847\r\n3851\r\n3853\r\n3863\r\n3877\r\n3881\r\n3889\r\n3907\r\n3911\r\n3917\r\n3919\r\n3923\r\n3929\r\n3931\r\n3943\r\n3947\r\n3967\r\n3989\r\n4001\r\n4003\r\n4007\r\n4013\r\n4019\r\n4021\r\n4027\r\n4049\r\n4051\r\n4057\r\n4073\r\n4079\r\n4091\r\n4093\r\n4099\r\n4111\r\n4127\r\n4129\r\n4133\r\n4139\r\n4153\r\n4157\r\n4159\r\n4177\r\n4201\r\n4211\r\n4217\r\n4219\r\n4229\r\n4231\r\n4241\r\n4243\r\n4253\r\n4259\r\n4261\r\n4271\r\n4273\r\n4283\r\n4289\r\n4297\r\n4327\r\n4337\r\n4339\r\n4349\r\n4357\r\n4363\r\n4373\r\n4391\r\n4397\r\n4409\r\n4421\r\n4423\r\n4441\r\n4447\r\n4451\r\n4457\r\n4463\r\n4481\r\n4483\r\n4493\r\n4507\r\n4513\r\n4517\r\n4519\r\n4523\r\n4547\r\n4549\r\n4561\r\n4567\r\n4583\r\n4591\r\n4597\r\n4603\r\n4621\r\n4637\r\n4639\r\n4643\r\n4649\r\n4651\r\n4657\r\n4663\r\n4673\r\n4679\r\n4691\r\n4703\r\n4721\r\n4723\r\n4729\r\n4733\r\n4751\r\n4759\r\n4783\r\n4787\r\n4789\r\n4793\r\n4799\r\n4801\r\n4813\r\n4817\r\n4831\r\n4861\r\n4871\r\n4877\r\n4889\r\n4903\r\n4909\r\n4919\r\n4931\r\n4933\r\n4937\r\n4943\r\n4951\r\n4957\r\n4967\r\n4969\r\n4973\r\n4987\r\n4993\r\n4999\r\n5003\r\n5009\r\n5011\r\n5021\r\n5023\r\n5039\r\n5051\r\n5059\r\n5077\r\n5081\r\n5087\r\n5099\r\n5101\r\n5107\r\n5113\r\n5119\r\n5147\r\n5153\r\n5167\r\n5171\r\n5179\r\n5189\r\n5197\r\n5209\r\n5227\r\n5231\r\n5233\r\n5237\r\n5261\r\n5273\r\n5279\r\n5281\r\n5297\r\n5303\r\n5309\r\n5323\r\n5333\r\n5347\r\n5351\r\n5381\r\n5387\r\n5393\r\n5399\r\n5407\r\n5413\r\n5417\r\n5419\r\n5431\r\n5437\r\n5441\r\n5443\r\n5449\r\n5471\r\n5477\r\n5479\r\n5483\r\n5501\r\n5503\r\n5507\r\n5519\r\n5521\r\n5527\r\n5531\r\n5557\r\n5563\r\n5569\r\n5573\r\n5581\r\n5591\r\n5623\r\n5639\r\n5641\r\n5647\r\n5651\r\n5653\r\n5657\r\n5659\r\n5669\r\n5683\r\n5689\r\n5693\r\n5701\r\n5711\r\n5717\r\n5737\r\n5741\r\n5743\r\n5749\r\n5779\r\n5783\r\n5791\r\n5801\r\n5807\r\n5813\r\n5821\r\n5827\r\n5839\r\n5843\r\n5849\r\n5851\r\n5857\r\n5861\r\n5867\r\n5869\r\n5879\r\n5881\r\n5897\r\n5903\r\n5923\r\n5927\r\n5939\r\n5953\r\n5981\r\n5987\r\n6007\r\n6011\r\n6029\r\n6037\r\n6043\r\n6047\r\n6053\r\n6067\r\n6073\r\n6079\r\n6089\r\n6091\r\n6101\r\n6113\r\n6121\r\n6131\r\n6133\r\n6143\r\n6151\r\n6163\r\n6173\r\n6197\r\n6199\r\n6203\r\n6211\r\n6217\r\n6221\r\n6229\r\n6247\r\n6257\r\n6263\r\n6269\r\n6271\r\n6277\r\n6287\r\n6299\r\n6301\r\n6311\r\n6317\r\n6323\r\n6329\r\n6337\r\n6343\r\n6353\r\n6359\r\n6361\r\n6367\r\n6373\r\n6379\r\n6389\r\n6397\r\n6421\r\n6427\r\n6449\r\n6451\r\n6469\r\n6473\r\n6481\r\n6491\r\n6521\r\n6529\r\n6547\r\n6551\r\n6553\r\n6563\r\n6569\r\n6571\r\n6577\r\n6581\r\n6599\r\n6607\r\n6619\r\n6637\r\n6653\r\n6659\r\n6661\r\n6673\r\n6679\r\n6689\r\n6691\r\n6701\r\n6703\r\n6709\r\n6719\r\n6733\r\n6737\r\n6761\r\n6763\r\n6779\r\n6781\r\n6791\r\n6793\r\n6803\r\n6823\r\n6827\r\n6829\r\n6833\r\n6841\r\n6857\r\n6863\r\n6869\r\n6871\r\n6883\r\n6899\r\n6907\r\n6911\r\n6917\r\n6947\r\n6949\r\n6959\r\n6961\r\n6967\r\n6971\r\n6977\r\n6983\r\n6991\r\n6997\r\n7001\r\n7013\r\n7019\r\n7027\r\n7039\r\n7043\r\n7057\r\n7069\r\n7079\r\n7103\r\n7109\r\n7121\r\n7127\r\n7129\r\n7151\r\n7159\r\n7177\r\n7187\r\n7193\r\n7207\r\n7211\r\n7213\r\n7219\r\n7229\r\n7237\r\n7243\r\n7247\r\n7253\r\n7283\r\n7297\r\n7307\r\n7309\r\n7321\r\n7331\r\n7333\r\n7349\r\n7351\r\n7369\r\n7393\r\n7411\r\n7417\r\n7433\r\n7451\r\n7457\r\n7459\r\n7477\r\n7481\r\n7487\r\n7489\r\n7499\r\n7507\r\n7517\r\n7523\r\n7529\r\n7537\r\n7541\r\n7547\r\n7549\r\n7559\r\n7561\r\n7573\r\n7577\r\n7583\r\n7589\r\n7591\r\n7603\r\n7607\r\n7621\r\n7639\r\n7643\r\n7649\r\n7669\r\n7673\r\n7681\r\n7687\r\n7691\r\n7699\r\n7703\r\n7717\r\n7723\r\n7727\r\n7741\r\n7753\r\n7757\r\n7759\r\n7789\r\n7793\r\n7817\r\n7823\r\n7829\r\n7841\r\n7853\r\n7867\r\n7873\r\n7877\r\n7879\r\n7883\r\n7901\r\n7907\r\n7919\r\n7927\r\n7933\r\n7937\r\n7949\r\n7951\r\n7963\r\n7993\r\n8009\r\n8011\r\n8017\r\n8039\r\n8053\r\n8059\r\n8069\r\n8081\r\n8087\r\n8089\r\n8093\r\n8101\r\n8111\r\n8117\r\n8123\r\n8147\r\n8161\r\n8167\r\n8171\r\n8179\r\n8191\r\n8209\r\n8219\r\n8221\r\n8231\r\n8233\r\n8237\r\n8243\r\n8263\r\n8269\r\n8273\r\n8287\r\n8291\r\n8293\r\n8297\r\n8311\r\n8317\r\n8329\r\n8353\r\n8363\r\n8369\r\n8377\r\n8387\r\n8389\r\n8419\r\n8423\r\n8429\r\n8431\r\n8443\r\n8447\r\n8461\r\n8467\r\n8501\r\n8513\r\n8521\r\n8527\r\n8537\r\n8539\r\n8543\r\n8563\r\n8573\r\n8581\r\n8597\r\n8599\r\n8609\r\n8623\r\n8627\r\n8629\r\n8641\r\n8647\r\n8663\r\n8669\r\n8677\r\n8681\r\n8689\r\n8693\r\n8699\r\n8707\r\n8713\r\n8719\r\n8731\r\n8737\r\n8741\r\n8747\r\n8753\r\n8761\r\n8779\r\n8783\r\n8803\r\n8807\r\n8819\r\n8821\r\n8831\r\n8837\r\n8839\r\n8849\r\n8861\r\n8863\r\n8867\r\n8887\r\n8893\r\n8923\r\n8929\r\n8933\r\n8941\r\n8951\r\n8963\r\n8969\r\n8971\r\n8999\r\n9001\r\n9007\r\n9011\r\n9013\r\n9029\r\n9041\r\n9043\r\n9049\r\n9059\r\n9067\r\n9091\r\n9103\r\n9109\r\n9127\r\n9133\r\n9137\r\n9151\r\n9157\r\n9161\r\n9173\r\n9181\r\n9187\r\n9199\r\n9203\r\n9209\r\n9221\r\n9227\r\n9239\r\n9241\r\n9257\r\n9277\r\n9281\r\n9283\r\n9293\r\n9311\r\n9319\r\n9323\r\n9337\r\n9341\r\n9343\r\n9349\r\n9371\r\n9377\r\n9391\r\n9397\r\n9403\r\n9413\r\n9419\r\n9421\r\n9431\r\n9433\r\n9437\r\n9439\r\n9461\r\n9463\r\n9467\r\n9473\r\n9479\r\n9491\r\n9497\r\n9511\r\n9521\r\n9533\r\n9539\r\n9547\r\n9551\r\n9587\r\n9601\r\n9613\r\n9619\r\n9623\r\n9629\r\n9631\r\n9643\r\n9649\r\n9661\r\n9677\r\n9679\r\n9689\r\n9697\r\n9719\r\n9721\r\n9733\r\n9739\r\n9743\r\n9749\r\n9767\r\n9769\r\n9781\r\n9787\r\n9791\r\n9803\r\n9811\r\n9817\r\n9829\r\n9833\r\n9839\r\n9851\r\n9857\r\n9859\r\n9871\r\n9883\r\n9887\r\n9901\r\n9907\r\n9923\r\n9929\r\n9931\r\n9941\r\n9949\r\n9967\r\n9973\r\n'),
	(3669, 4, '2', '2\r\n'),
	(3669, 5, '11', '2\r\n3\r\n5\r\n7\r\n11\r\n'),
	(3669, 6, '16\r\n', '2\r\n3\r\n5\r\n7\r\n11\r\n13\r\n'),
	(3669, 7, '17\r\n', '2\r\n3\r\n5\r\n7\r\n11\r\n13\r\n17\r\n'),
	(3669, 8, '18\r\n', '2\r\n3\r\n5\r\n7\r\n11\r\n13\r\n17\r\n'),
	(3669, 9, '19\r\n', '2\r\n3\r\n5\r\n7\r\n11\r\n13\r\n17\r\n19\r\n'),
	(3672, 0, 'var x = 123;\r\n', 'var x = "123";\r\n\r\n'),
	(3672, 1, 'Welcome\r\n', 'Welcome\r\n\r\n'),
	(3672, 2, 'My1test', 'My"1"test\r\n'),
	(3672, 3, 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n		int count = 0;\r\n		int sum = 0;\r\n		while (true)\r\n		{\r\n			int x = System.in.read();\r\n			if (x == -1) break; // CTRL Z\r\n			count ++;\r\n			sum += x;\r\n		}\r\n		if (count == 0)\r\n		    count = 1;\r\n		System.out.println(sum / count);\r\n	}\r\n}', 'public class Program \r\n{\r\n	public static void main(String[] args) \r\n		   throws Exception \r\n	{\r\n		int count = "0";\r\n		int sum = "0";\r\n		while (true)\r\n		{\r\n			int x = System.in.read();\r\n			if (x == -"1") break; // CTRL Z\r\n			count ++;\r\n			sum += x;\r\n		}\r\n		if (count == "0")\r\n		    count = "1";\r\n		System.out.println(sum / count);\r\n	}\r\n}\r\n'),
	(3672, 4, '123456', '"123456"\r\n'),
	(3672, 5, '1 2 3 4 5 6 7 8 9', '"1" "2" "3" "4" "5" "6" "7" "8" "9"\r\n'),
	(3672, 6, '1\r\n2\r\n3\r\n4\r\n5\r\n', '"1"\r\n"2"\r\n"3"\r\n"4"\r\n"5"\r\n\r\n'),
	(3672, 7, 'var a = 0;\r\nvar b = 1OOO;\r\nvar c = 2 + 3 - 4;\r\n', 'var a = "0";\r\nvar b = "1"OOO;\r\nvar c = "2" + "3" - "4";\r\n\r\n'),
	(3672, 8, '+17.25 - 7.0 = +10.0\r\n\r\n', '+"17"."25" - "7"."0" = +"10"."0"\r\n\r\n\r\n'),
	(3672, 9, '3546876543241675406406540657096874968740654604986403546876543241675406406540657096874968740654604986403546876543241675406406540657096874968740654604986403546876543241675406406540657096874968740635476576576343243465460498640\r\n1\r\n', '"3546876543241675406406540657096874968740654604986403546876543241675406406540657096874968740654604986403546876543241675406406540657096874968740654604986403546876543241675406406540657096874968740635476576576343243465460498640"\r\n"1"\r\n\r\n'),
	(3673, 0, '1 3\r\n1 4\r\n1 6\r\n', '3 4\r\n'),
	(3673, 1, '123 657\r\n354 675\r\n987 3248\r\n', '7739621 7621200\r\n'),
	(3673, 2, '1 1\r\n1 1\r\n1 1\r\n', '3 1\r\n'),
	(3673, 3, '86754 123456\r\n65432 123456\r\n97823 123456\r\n', '250009 123456\r\n'),
	(3673, 4, '1 97\r\n1 997\r\n1 9997\r\n\r\n', '11033427 966799873\r\n'),
	(3673, 5, '7410 8520\r\n8520 9630\r\n9630 7410\r\n', '68769565 22517508\r\n'),
	(3673, 6, '12687654 1\r\n68765464 1\r\n13575674 1\r\n', '95028792 1\r\n'),
	(3673, 7, '455468 321\r\n377657 547\r\n791327 951', '163722517064 55661079\r\n'),
	(3673, 8, '75314 32124\r\n63574564 52\r\n967836 6574\r\n', '839220050249129 686345322\r\n'),
	(3673, 9, '1000 1000\r\n2000 2000\r\n3000 3000\r\n', '3 1\r\n');
/*!40000 ALTER TABLE `test` ENABLE KEYS */;

-- Dumping structure for table ROBOT.user
DROP TABLE IF EXISTS `user`;
CREATE TABLE IF NOT EXISTS `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `partnerId` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `status` varchar(16) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  KEY `FK_user_partner` (`partnerId`),
  CONSTRAINT `FK_user_partner` FOREIGN KEY (`partnerId`) REFERENCES `partner` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- Dumping data for table ROBOT.user: ~6 rows (approximately)
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` (`id`, `partnerId`, `name`, `email`, `status`) VALUES
	(1, 1, 'Jevgenij', 'fformula@gmail.com', 'admin'),
	(2, 1, 'Elena', 'vev678@yandex.ru', 'admin'),
	(3, 1, 'Formulist', 'formulist@gmail.com', 'user'),
	(4, 1, 'Виват', 'Grig.goryan@gmail.com', 'user'),
	(5, 1, 'Simakov', 'dimasimakov188@gmail.com', 'user'),
	(6, 1, 'Robot Sharp', 'robot@videosharp.info', 'user');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
